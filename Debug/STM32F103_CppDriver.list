
STM32F103_CppDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ad4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003cb8  08003cb8  00013cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ce8  08003ce8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ce8  08003ce8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ce8  08003ce8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ce8  08003ce8  00013ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cec  08003cec  00013cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000070  08003d60  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08003d60  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ed0  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003409  00000000  00000000  00031f69  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001088  00000000  00000000  00035378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ec0  00000000  00000000  00036400  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006658  00000000  00000000  000372c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fc6f  00000000  00000000  0003d918  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a1e4  00000000  00000000  0004d587  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d776b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004464  00000000  00000000  000d77e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08003ca0 	.word	0x08003ca0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08003ca0 	.word	0x08003ca0

08000224 <_ZN12UartFixedLenC1EP20__UART_HandleTypeDef>:
	uint8_t crc;
} UartFixedFrame_t;
class UartFixedLen
{
public:
	UartFixedLen(UART_HandleTypeDef *huart) :
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	6039      	str	r1, [r7, #0]
			_uart(huart), _sendFrame
			{ 0 }, _recvFrame
			{ 0 }, _uartRecvFlag(0)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	683a      	ldr	r2, [r7, #0]
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3304      	adds	r3, #4
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]
 8000240:	60da      	str	r2, [r3, #12]
 8000242:	611a      	str	r2, [r3, #16]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3318      	adds	r3, #24
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2200      	movs	r2, #0
 8000258:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	22aa      	movs	r2, #170	; 0xaa
 8000260:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	{

	}
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	4618      	mov	r0, r3
 8000268:	370c      	adds	r7, #12
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr

08000270 <_ZN11UartFlexLenC1EP20__UART_HandleTypeDef>:
#define UART_FLEX_LEN_MAX_SIZE (20)

class UartFlexLen
{
public:
	UartFlexLen(UART_HandleTypeDef *huart) :
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
			_uart(huart), _data
	{	0}, _index(0), _state(0), _frame
	{	0}, _getFrame(0)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	683a      	ldr	r2, [r7, #0]
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2214      	movs	r2, #20
 8000284:	711a      	strb	r2, [r3, #4]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2200      	movs	r2, #0
 800028a:	715a      	strb	r2, [r3, #5]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2200      	movs	r2, #0
 8000290:	719a      	strb	r2, [r3, #6]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2200      	movs	r2, #0
 8000296:	71da      	strb	r2, [r3, #7]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	3308      	adds	r3, #8
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	609a      	str	r2, [r3, #8]
 80002a4:	60da      	str	r2, [r3, #12]
 80002a6:	611a      	str	r2, [r3, #16]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2200      	movs	r2, #0
 80002ac:	771a      	strb	r2, [r3, #28]
	{

	}
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4618      	mov	r0, r3
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bc80      	pop	{r7}
 80002b8:	4770      	bx	lr
	...

080002bc <AppInit>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *can)
{
	pComCan->IrqHandler();
}
void AppInit()
{
 80002bc:	b598      	push	{r3, r4, r7, lr}
 80002be:	af00      	add	r7, sp, #0
	pUartFixed = new UartFixedLen(&huart1);
 80002c0:	2030      	movs	r0, #48	; 0x30
 80002c2:	f003 fbe1 	bl	8003a88 <_Znwj>
 80002c6:	4603      	mov	r3, r0
 80002c8:	461c      	mov	r4, r3
 80002ca:	4914      	ldr	r1, [pc, #80]	; (800031c <AppInit+0x60>)
 80002cc:	4620      	mov	r0, r4
 80002ce:	f7ff ffa9 	bl	8000224 <_ZN12UartFixedLenC1EP20__UART_HandleTypeDef>
 80002d2:	4b13      	ldr	r3, [pc, #76]	; (8000320 <AppInit+0x64>)
 80002d4:	601c      	str	r4, [r3, #0]
	pUartFlex = new UartFlexLen(&huart2);
 80002d6:	2020      	movs	r0, #32
 80002d8:	f003 fbd6 	bl	8003a88 <_Znwj>
 80002dc:	4603      	mov	r3, r0
 80002de:	461c      	mov	r4, r3
 80002e0:	4910      	ldr	r1, [pc, #64]	; (8000324 <AppInit+0x68>)
 80002e2:	4620      	mov	r0, r4
 80002e4:	f7ff ffc4 	bl	8000270 <_ZN11UartFlexLenC1EP20__UART_HandleTypeDef>
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <AppInit+0x6c>)
 80002ea:	601c      	str	r4, [r3, #0]
	pTimCapture = new TimCapture(htim3);
 80002ec:	2044      	movs	r0, #68	; 0x44
 80002ee:	f003 fbcb 	bl	8003a88 <_Znwj>
 80002f2:	4603      	mov	r3, r0
 80002f4:	461c      	mov	r4, r3
 80002f6:	490d      	ldr	r1, [pc, #52]	; (800032c <AppInit+0x70>)
 80002f8:	4620      	mov	r0, r4
 80002fa:	f000 f8c1 	bl	8000480 <_ZN10TimCaptureC1ER17TIM_HandleTypeDef>
 80002fe:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <AppInit+0x74>)
 8000300:	601c      	str	r4, [r3, #0]
	pComCan = new ComCan(hcan);
 8000302:	2038      	movs	r0, #56	; 0x38
 8000304:	f003 fbc0 	bl	8003a88 <_Znwj>
 8000308:	4603      	mov	r3, r0
 800030a:	461c      	mov	r4, r3
 800030c:	4909      	ldr	r1, [pc, #36]	; (8000334 <AppInit+0x78>)
 800030e:	4620      	mov	r0, r4
 8000310:	f000 f822 	bl	8000358 <_ZN6ComCanC1ER19__CAN_HandleTypeDef>
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <AppInit+0x7c>)
 8000316:	601c      	str	r4, [r3, #0]
}
 8000318:	bf00      	nop
 800031a:	bd98      	pop	{r3, r4, r7, pc}
 800031c:	20000214 	.word	0x20000214
 8000320:	2000008c 	.word	0x2000008c
 8000324:	20000254 	.word	0x20000254
 8000328:	20000090 	.word	0x20000090
 800032c:	2000010c 	.word	0x2000010c
 8000330:	20000094 	.word	0x20000094
 8000334:	200000dc 	.word	0x200000dc
 8000338:	20000098 	.word	0x20000098

0800033c <AppLoop>:

void AppLoop()
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0

	pComCan->SendCmd();
 8000340:	4b04      	ldr	r3, [pc, #16]	; (8000354 <AppLoop+0x18>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4618      	mov	r0, r3
 8000346:	f000 f869 	bl	800041c <_ZN6ComCan7SendCmdEv>

	HAL_Delay(100);
 800034a:	2064      	movs	r0, #100	; 0x64
 800034c:	f000 fe6a 	bl	8001024 <HAL_Delay>
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000098 	.word	0x20000098

08000358 <_ZN6ComCanC1ER19__CAN_HandleTypeDef>:
 *      Author: Administrator
 */
#include "com_can.h"
#include <string.h>

ComCan::ComCan(CAN_HandleTypeDef &hcan) :
 8000358:	b5b0      	push	{r4, r5, r7, lr}
 800035a:	b08c      	sub	sp, #48	; 0x30
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
		_hcan(hcan),
		_canMsg
		{ 0 }
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	4614      	mov	r4, r2
 8000368:	461d      	mov	r5, r3
 800036a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800036c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800036e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000372:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000376:	e884 0003 	stmia.w	r4, {r0, r1}
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	3328      	adds	r3, #40	; 0x28
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	2212      	movs	r2, #18
 800038a:	869a      	strh	r2, [r3, #52]	; 0x34
{
	//配置过滤器
	//配置FIFO0
	CAN_FilterTypeDef canFilter;

	canFilter.FilterActivation = ENABLE; // 使能滤波
 800038c:	2301      	movs	r3, #1
 800038e:	62bb      	str	r3, [r7, #40]	; 0x28
	canFilter.FilterBank = 0; // 滤波器序号，0-13
 8000390:	2300      	movs	r3, #0
 8000392:	61fb      	str	r3, [r7, #28]
	canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0; // 滤波器绑定FIFO 0
 8000394:	2300      	movs	r3, #0
 8000396:	61bb      	str	r3, [r7, #24]
	canFilter.FilterIdHigh = 0; // 掩码后ID的高16bit
 8000398:	2300      	movs	r3, #0
 800039a:	60bb      	str	r3, [r7, #8]
	canFilter.FilterIdLow = 0; // 掩码后ID的低16bit
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
	canFilter.FilterMaskIdHigh = 0; // ID掩码值高16bit
 80003a0:	2300      	movs	r3, #0
 80003a2:	613b      	str	r3, [r7, #16]
	canFilter.FilterMaskIdLow = 0; // ID掩码值低16bit
 80003a4:	2300      	movs	r3, #0
 80003a6:	617b      	str	r3, [r7, #20]
	canFilter.FilterMode = CAN_FILTERMODE_IDMASK; // 滤波器模式，设置ID掩码模式
 80003a8:	2300      	movs	r3, #0
 80003aa:	623b      	str	r3, [r7, #32]
	canFilter.FilterScale = CAN_FILTERSCALE_32BIT; // 32位
 80003ac:	2301      	movs	r3, #1
 80003ae:	627b      	str	r3, [r7, #36]	; 0x24
	canFilter.SlaveStartFilterBank = 0;  //共14个滤波器
 80003b0:	2300      	movs	r3, #0
 80003b2:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_CAN_ConfigFilter(&_hcan, &canFilter) != HAL_OK)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f107 0208 	add.w	r2, r7, #8
 80003ba:	4611      	mov	r1, r2
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 f96a 	bl	8001696 <HAL_CAN_ConfigFilter>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	bf14      	ite	ne
 80003c8:	2301      	movne	r3, #1
 80003ca:	2300      	moveq	r3, #0
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <_ZN6ComCanC1ER19__CAN_HandleTypeDef+0x7e>
	{
		Error_Handler();
 80003d2:	f000 fa65 	bl	80008a0 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&_hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2102      	movs	r1, #2
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 fb42 	bl	8001a64 <HAL_CAN_ActivateNotification>
 80003e0:	4603      	mov	r3, r0
			!= HAL_OK)
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	bf14      	ite	ne
 80003e6:	2301      	movne	r3, #1
 80003e8:	2300      	moveq	r3, #0
 80003ea:	b2db      	uxtb	r3, r3
	if (HAL_CAN_ActivateNotification(&_hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <_ZN6ComCanC1ER19__CAN_HandleTypeDef+0x9c>
	{
		Error_Handler();
 80003f0:	f000 fa56 	bl	80008a0 <Error_Handler>
	}
	if (HAL_CAN_Start(&_hcan) != HAL_OK)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f001 fa16 	bl	8001828 <HAL_CAN_Start>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	bf14      	ite	ne
 8000402:	2301      	movne	r3, #1
 8000404:	2300      	moveq	r3, #0
 8000406:	b2db      	uxtb	r3, r3
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <_ZN6ComCanC1ER19__CAN_HandleTypeDef+0xb8>
	{
		Error_Handler();
 800040c:	f000 fa48 	bl	80008a0 <Error_Handler>
	}
}
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4618      	mov	r0, r3
 8000414:	3730      	adds	r7, #48	; 0x30
 8000416:	46bd      	mov	sp, r7
 8000418:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800041c <_ZN6ComCan7SendCmdEv>:

		_canMsg.valid = 1;
	}
}
void ComCan::SendCmd()
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08a      	sub	sp, #40	; 0x28
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef pHeader =
 8000424:	f107 0310 	add.w	r3, r7, #16
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
 8000432:	611a      	str	r2, [r3, #16]
 8000434:	615a      	str	r2, [r3, #20]
	{ 0 };
	uint8_t aData[] =
 8000436:	4b11      	ldr	r3, [pc, #68]	; (800047c <_ZN6ComCan7SendCmdEv+0x60>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	60fb      	str	r3, [r7, #12]
	{ 0, 1, 2, 0 };
	pHeader.IDE = CAN_ID_STD;
 800043c:	2300      	movs	r3, #0
 800043e:	61bb      	str	r3, [r7, #24]
	pHeader.DLC = sizeof(aData);
 8000440:	2304      	movs	r3, #4
 8000442:	623b      	str	r3, [r7, #32]
	pHeader.StdId = CAN_ID_TEST;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000448:	613b      	str	r3, [r7, #16]
	pHeader.RTR = CAN_RTR_DATA;
 800044a:	2300      	movs	r3, #0
 800044c:	61fb      	str	r3, [r7, #28]
	uint32_t TxMailbox;
	if (HAL_CAN_AddTxMessage(&_hcan, &pHeader, aData, &TxMailbox) != HAL_OK)
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f107 0308 	add.w	r3, r7, #8
 8000454:	f107 020c 	add.w	r2, r7, #12
 8000458:	f107 0110 	add.w	r1, r7, #16
 800045c:	f001 fa28 	bl	80018b0 <HAL_CAN_AddTxMessage>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	bf14      	ite	ne
 8000466:	2301      	movne	r3, #1
 8000468:	2300      	moveq	r3, #0
 800046a:	b2db      	uxtb	r3, r3
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <_ZN6ComCan7SendCmdEv+0x58>
	{
		Error_Handler();
 8000470:	f000 fa16 	bl	80008a0 <Error_Handler>
	}
}
 8000474:	bf00      	nop
 8000476:	3728      	adds	r7, #40	; 0x28
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	08003cb8 	.word	0x08003cb8

08000480 <_ZN10TimCaptureC1ER17TIM_HandleTypeDef>:
 *      Author: Administrator
 */

#include "tim_capture.h"

TimCapture::TimCapture(TIM_HandleTypeDef &tim)
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	6039      	str	r1, [r7, #0]
{

	HAL_TIM_IC_Start_IT(&_tim, TIM_CHANNEL_1);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	2100      	movs	r1, #0
 800048e:	4618      	mov	r0, r3
 8000490:	f002 fd86 	bl	8002fa0 <HAL_TIM_IC_Start_IT>
}
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4618      	mov	r0, r3
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80004b0:	4b20      	ldr	r3, [pc, #128]	; (8000534 <MX_ADC1_Init+0x94>)
 80004b2:	4a21      	ldr	r2, [pc, #132]	; (8000538 <MX_ADC1_Init+0x98>)
 80004b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004b6:	4b1f      	ldr	r3, [pc, #124]	; (8000534 <MX_ADC1_Init+0x94>)
 80004b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004be:	4b1d      	ldr	r3, [pc, #116]	; (8000534 <MX_ADC1_Init+0x94>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004c4:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <MX_ADC1_Init+0x94>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004ca:	4b1a      	ldr	r3, [pc, #104]	; (8000534 <MX_ADC1_Init+0x94>)
 80004cc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004d2:	4b18      	ldr	r3, [pc, #96]	; (8000534 <MX_ADC1_Init+0x94>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80004d8:	4b16      	ldr	r3, [pc, #88]	; (8000534 <MX_ADC1_Init+0x94>)
 80004da:	2202      	movs	r2, #2
 80004dc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004de:	4815      	ldr	r0, [pc, #84]	; (8000534 <MX_ADC1_Init+0x94>)
 80004e0:	f000 fdc2 	bl	8001068 <HAL_ADC_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80004ea:	f000 f9d9 	bl	80008a0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004f2:	2301      	movs	r3, #1
 80004f4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	4619      	mov	r1, r3
 80004fe:	480d      	ldr	r0, [pc, #52]	; (8000534 <MX_ADC1_Init+0x94>)
 8000500:	f000 fe9c 	bl	800123c <HAL_ADC_ConfigChannel>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800050a:	f000 f9c9 	bl	80008a0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800050e:	2301      	movs	r3, #1
 8000510:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000512:	2302      	movs	r3, #2
 8000514:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	4619      	mov	r1, r3
 800051a:	4806      	ldr	r0, [pc, #24]	; (8000534 <MX_ADC1_Init+0x94>)
 800051c:	f000 fe8e 	bl	800123c <HAL_ADC_ConfigChannel>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000526:	f000 f9bb 	bl	80008a0 <Error_Handler>
  }

}
 800052a:	bf00      	nop
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200000ac 	.word	0x200000ac
 8000538:	40012400 	.word	0x40012400

0800053c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a14      	ldr	r2, [pc, #80]	; (80005a8 <HAL_ADC_MspInit+0x6c>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d121      	bne.n	80005a0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800055c:	4b13      	ldr	r3, [pc, #76]	; (80005ac <HAL_ADC_MspInit+0x70>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a12      	ldr	r2, [pc, #72]	; (80005ac <HAL_ADC_MspInit+0x70>)
 8000562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000566:	6193      	str	r3, [r2, #24]
 8000568:	4b10      	ldr	r3, [pc, #64]	; (80005ac <HAL_ADC_MspInit+0x70>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000574:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <HAL_ADC_MspInit+0x70>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a0c      	ldr	r2, [pc, #48]	; (80005ac <HAL_ADC_MspInit+0x70>)
 800057a:	f043 0304 	orr.w	r3, r3, #4
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <HAL_ADC_MspInit+0x70>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f003 0304 	and.w	r3, r3, #4
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800058c:	2303      	movs	r3, #3
 800058e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000590:	2303      	movs	r3, #3
 8000592:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	4619      	mov	r1, r3
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <HAL_ADC_MspInit+0x74>)
 800059c:	f001 fe64 	bl	8002268 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005a0:	bf00      	nop
 80005a2:	3720      	adds	r7, #32
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40012400 	.word	0x40012400
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40010800 	.word	0x40010800

080005b4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0

  hcan.Instance = CAN1;
 80005b8:	4b17      	ldr	r3, [pc, #92]	; (8000618 <MX_CAN_Init+0x64>)
 80005ba:	4a18      	ldr	r2, [pc, #96]	; (800061c <MX_CAN_Init+0x68>)
 80005bc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 80005be:	4b16      	ldr	r3, [pc, #88]	; (8000618 <MX_CAN_Init+0x64>)
 80005c0:	2209      	movs	r2, #9
 80005c2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <MX_CAN_Init+0x64>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005ca:	4b13      	ldr	r3, [pc, #76]	; (8000618 <MX_CAN_Init+0x64>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_CAN_Init+0x64>)
 80005d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80005d6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_CAN_Init+0x64>)
 80005da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005de:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <MX_CAN_Init+0x64>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_CAN_Init+0x64>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_CAN_Init+0x64>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_CAN_Init+0x64>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <MX_CAN_Init+0x64>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_CAN_Init+0x64>)
 8000600:	2200      	movs	r2, #0
 8000602:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_CAN_Init+0x64>)
 8000606:	f000 ff4b 	bl	80014a0 <HAL_CAN_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000610:	f000 f946 	bl	80008a0 <Error_Handler>
  }

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200000dc 	.word	0x200000dc
 800061c:	40006400 	.word	0x40006400

08000620 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a1c      	ldr	r2, [pc, #112]	; (80006ac <HAL_CAN_MspInit+0x8c>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d131      	bne.n	80006a4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <HAL_CAN_MspInit+0x90>)
 8000642:	69db      	ldr	r3, [r3, #28]
 8000644:	4a1a      	ldr	r2, [pc, #104]	; (80006b0 <HAL_CAN_MspInit+0x90>)
 8000646:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800064a:	61d3      	str	r3, [r2, #28]
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <HAL_CAN_MspInit+0x90>)
 800064e:	69db      	ldr	r3, [r3, #28]
 8000650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <HAL_CAN_MspInit+0x90>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <HAL_CAN_MspInit+0x90>)
 800065e:	f043 0304 	orr.w	r3, r3, #4
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_CAN_MspInit+0x90>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f003 0304 	and.w	r3, r3, #4
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000670:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000674:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	4619      	mov	r1, r3
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <HAL_CAN_MspInit+0x94>)
 8000686:	f001 fdef 	bl	8002268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000694:	2303      	movs	r3, #3
 8000696:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	f107 0310 	add.w	r3, r7, #16
 800069c:	4619      	mov	r1, r3
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <HAL_CAN_MspInit+0x94>)
 80006a0:	f001 fde2 	bl	8002268 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006a4:	bf00      	nop
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40006400 	.word	0x40006400
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40010800 	.word	0x40010800

080006b8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_CRC_Init+0x20>)
 80006be:	4a07      	ldr	r2, [pc, #28]	; (80006dc <MX_CRC_Init+0x24>)
 80006c0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_CRC_Init+0x20>)
 80006c4:	f001 fb01 	bl	8001cca <HAL_CRC_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006ce:	f000 f8e7 	bl	80008a0 <Error_Handler>
  }

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000104 	.word	0x20000104
 80006dc:	40023000 	.word	0x40023000

080006e0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a09      	ldr	r2, [pc, #36]	; (8000714 <HAL_CRC_MspInit+0x34>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d10b      	bne.n	800070a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_CRC_MspInit+0x38>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <HAL_CRC_MspInit+0x38>)
 80006f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006fc:	6153      	str	r3, [r2, #20]
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_CRC_MspInit+0x38>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	40023000 	.word	0x40023000
 8000718:	40021000 	.word	0x40021000

0800071c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_DMA_Init+0x48>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <MX_DMA_Init+0x48>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6153      	str	r3, [r2, #20]
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <MX_DMA_Init+0x48>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	200f      	movs	r0, #15
 8000740:	f001 fa8d 	bl	8001c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000744:	200f      	movs	r0, #15
 8000746:	f001 faa6 	bl	8001c96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2010      	movs	r0, #16
 8000750:	f001 fa85 	bl	8001c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000754:	2010      	movs	r0, #16
 8000756:	f001 fa9e 	bl	8001c96 <HAL_NVIC_EnableIRQ>

}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000

08000768 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_GPIO_Init+0x40>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <MX_GPIO_Init+0x40>)
 8000774:	f043 0320 	orr.w	r3, r3, #32
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_GPIO_Init+0x40>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f003 0320 	and.w	r3, r3, #32
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_GPIO_Init+0x40>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <MX_GPIO_Init+0x40>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6193      	str	r3, [r2, #24]
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <MX_GPIO_Init+0x40>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	40021000 	.word	0x40021000

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fbd6 	bl	8000f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f817 	bl	80007e6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b8:	f7ff ffd6 	bl	8000768 <MX_GPIO_Init>
  MX_DMA_Init();
 80007bc:	f7ff ffae 	bl	800071c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80007c0:	f000 fa7c 	bl	8000cbc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80007c4:	f7ff fe6c 	bl	80004a0 <MX_ADC1_Init>
  MX_CAN_Init();
 80007c8:	f7ff fef4 	bl	80005b4 <MX_CAN_Init>
  MX_CRC_Init();
 80007cc:	f7ff ff74 	bl	80006b8 <MX_CRC_Init>
  MX_USART2_UART_Init();
 80007d0:	f000 fa9e 	bl	8000d10 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80007d4:	f000 f95c 	bl	8000a90 <MX_TIM1_Init>
  MX_TIM3_Init();
 80007d8:	f000 f9ac 	bl	8000b34 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	AppInit();
 80007dc:	f7ff fd6e 	bl	80002bc <AppInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		AppLoop();
 80007e0:	f7ff fdac 	bl	800033c <AppLoop>
 80007e4:	e7fc      	b.n	80007e0 <main+0x34>

080007e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b096      	sub	sp, #88	; 0x58
 80007ea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007f0:	2228      	movs	r2, #40	; 0x28
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f003 f99b 	bl	8003b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
 8000818:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800081a:	2301      	movs	r3, #1
 800081c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000822:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082c:	2302      	movs	r3, #2
 800082e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000834:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000836:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800083a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000840:	4618      	mov	r0, r3
 8000842:	f001 fe7b 	bl	800253c <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800084c:	f000 f828 	bl	80008a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000850:	230f      	movs	r3, #15
 8000852:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000854:	2302      	movs	r3, #2
 8000856:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	2102      	movs	r1, #2
 800086c:	4618      	mov	r0, r3
 800086e:	f002 f8e5 	bl	8002a3c <HAL_RCC_ClockConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000878:	f000 f812 	bl	80008a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800087c:	2302      	movs	r3, #2
 800087e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000884:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	4618      	mov	r0, r3
 800088a:	f002 fa73 	bl	8002d74 <HAL_RCCEx_PeriphCLKConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000894:	f000 f804 	bl	80008a0 <Error_Handler>
  }
}
 8000898:	bf00      	nop
 800089a:	3758      	adds	r7, #88	; 0x58
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <HAL_MspInit+0x5c>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	4a14      	ldr	r2, [pc, #80]	; (8000908 <HAL_MspInit+0x5c>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6193      	str	r3, [r2, #24]
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_MspInit+0x5c>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <HAL_MspInit+0x5c>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	4a0e      	ldr	r2, [pc, #56]	; (8000908 <HAL_MspInit+0x5c>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	61d3      	str	r3, [r2, #28]
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <HAL_MspInit+0x5c>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <HAL_MspInit+0x60>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <HAL_MspInit+0x60>)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	40021000 	.word	0x40021000
 800090c:	40010000 	.word	0x40010000

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <HardFault_Handler+0x4>

08000922 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <MemManage_Handler+0x4>

08000928 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <BusFault_Handler+0x4>

0800092e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <UsageFault_Handler+0x4>

08000934 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800095c:	f000 fb46 	bl	8000fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <DMA1_Channel5_IRQHandler+0x10>)
 800096a:	f001 fa41 	bl	8001df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200001d0 	.word	0x200001d0

08000978 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <DMA1_Channel6_IRQHandler+0x10>)
 800097e:	f001 fa37 	bl	8001df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000018c 	.word	0x2000018c

0800098c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
	return 1;
 8000990:	2301      	movs	r3, #1
}
 8000992:	4618      	mov	r0, r3
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr

0800099a <_kill>:

int _kill(int pid, int sig)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009a4:	f003 f892 	bl	8003acc <__errno>
 80009a8:	4602      	mov	r2, r0
 80009aa:	2316      	movs	r3, #22
 80009ac:	6013      	str	r3, [r2, #0]
	return -1;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <_exit>:

void _exit (int status)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80009c2:	f04f 31ff 	mov.w	r1, #4294967295
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff ffe7 	bl	800099a <_kill>
	while (1) {}		/* Make sure we hang here */
 80009cc:	e7fe      	b.n	80009cc <_exit+0x12>
	...

080009d0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <_sbrk+0x50>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d102      	bne.n	80009e6 <_sbrk+0x16>
		heap_end = &end;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <_sbrk+0x50>)
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <_sbrk+0x54>)
 80009e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <_sbrk+0x50>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <_sbrk+0x50>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4413      	add	r3, r2
 80009f4:	466a      	mov	r2, sp
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d907      	bls.n	8000a0a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80009fa:	f003 f867 	bl	8003acc <__errno>
 80009fe:	4602      	mov	r2, r0
 8000a00:	230c      	movs	r3, #12
 8000a02:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a04:	f04f 33ff 	mov.w	r3, #4294967295
 8000a08:	e006      	b.n	8000a18 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <_sbrk+0x50>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	4a03      	ldr	r2, [pc, #12]	; (8000a20 <_sbrk+0x50>)
 8000a14:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a16:	68fb      	ldr	r3, [r7, #12]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000009c 	.word	0x2000009c
 8000a24:	200002a0 	.word	0x200002a0

08000a28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <SystemInit+0x5c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <SystemInit+0x5c>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <SystemInit+0x5c>)
 8000a3a:	685a      	ldr	r2, [r3, #4]
 8000a3c:	4911      	ldr	r1, [pc, #68]	; (8000a84 <SystemInit+0x5c>)
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <SystemInit+0x60>)
 8000a40:	4013      	ands	r3, r2
 8000a42:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <SystemInit+0x5c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <SystemInit+0x5c>)
 8000a4a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a52:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <SystemInit+0x5c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <SystemInit+0x5c>)
 8000a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a5e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <SystemInit+0x5c>)
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <SystemInit+0x5c>)
 8000a66:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a6a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <SystemInit+0x5c>)
 8000a6e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a72:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <SystemInit+0x64>)
 8000a76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a7a:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	40021000 	.word	0x40021000
 8000a88:	f8ff0000 	.word	0xf8ff0000
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_TIM1_Init+0x9c>)
 8000aae:	4a20      	ldr	r2, [pc, #128]	; (8000b30 <MX_TIM1_Init+0xa0>)
 8000ab0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7200-1;
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <MX_TIM1_Init+0x9c>)
 8000ab4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000ab8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MX_TIM1_Init+0x9c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <MX_TIM1_Init+0x9c>)
 8000ac2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ac6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <MX_TIM1_Init+0x9c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <MX_TIM1_Init+0x9c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_TIM1_Init+0x9c>)
 8000ad6:	2280      	movs	r2, #128	; 0x80
 8000ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ada:	4814      	ldr	r0, [pc, #80]	; (8000b2c <MX_TIM1_Init+0x9c>)
 8000adc:	f002 fa00 	bl	8002ee0 <HAL_TIM_Base_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000ae6:	f7ff fedb 	bl	80008a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	4619      	mov	r1, r3
 8000af6:	480d      	ldr	r0, [pc, #52]	; (8000b2c <MX_TIM1_Init+0x9c>)
 8000af8:	f002 fb56 	bl	80031a8 <HAL_TIM_ConfigClockSource>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000b02:	f7ff fecd 	bl	80008a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b0e:	463b      	mov	r3, r7
 8000b10:	4619      	mov	r1, r3
 8000b12:	4806      	ldr	r0, [pc, #24]	; (8000b2c <MX_TIM1_Init+0x9c>)
 8000b14:	f002 fe4d 	bl	80037b2 <HAL_TIMEx_MasterConfigSynchronization>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b1e:	f7ff febf 	bl	80008a0 <Error_Handler>
  }

}
 8000b22:	bf00      	nop
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000014c 	.word	0x2000014c
 8000b30:	40012c00 	.word	0x40012c00

08000b34 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3a:	f107 0318 	add.w	r3, r7, #24
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b52:	463b      	mov	r3, r7
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8000b5e:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <MX_TIM3_Init+0xdc>)
 8000b60:	4a2c      	ldr	r2, [pc, #176]	; (8000c14 <MX_TIM3_Init+0xe0>)
 8000b62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 8000b64:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <MX_TIM3_Init+0xdc>)
 8000b66:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000b6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6c:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <MX_TIM3_Init+0xdc>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 8000b72:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <MX_TIM3_Init+0xdc>)
 8000b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7a:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <MX_TIM3_Init+0xdc>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b80:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <MX_TIM3_Init+0xdc>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b86:	4822      	ldr	r0, [pc, #136]	; (8000c10 <MX_TIM3_Init+0xdc>)
 8000b88:	f002 f9aa 	bl	8002ee0 <HAL_TIM_Base_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000b92:	f7ff fe85 	bl	80008a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b9c:	f107 0318 	add.w	r3, r7, #24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	481b      	ldr	r0, [pc, #108]	; (8000c10 <MX_TIM3_Init+0xdc>)
 8000ba4:	f002 fb00 	bl	80031a8 <HAL_TIM_ConfigClockSource>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000bae:	f7ff fe77 	bl	80008a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000bb2:	4817      	ldr	r0, [pc, #92]	; (8000c10 <MX_TIM3_Init+0xdc>)
 8000bb4:	f002 f9bf 	bl	8002f36 <HAL_TIM_IC_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000bbe:	f7ff fe6f 	bl	80008a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480f      	ldr	r0, [pc, #60]	; (8000c10 <MX_TIM3_Init+0xdc>)
 8000bd2:	f002 fdee 	bl	80037b2 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8000bdc:	f7ff fe60 	bl	80008a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000be0:	2300      	movs	r3, #0
 8000be2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000be4:	2301      	movs	r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4806      	ldr	r0, [pc, #24]	; (8000c10 <MX_TIM3_Init+0xdc>)
 8000bf8:	f002 fa3a 	bl	8003070 <HAL_TIM_IC_ConfigChannel>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000c02:	f7ff fe4d 	bl	80008a0 <Error_Handler>
  }

}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	2000010c 	.word	0x2000010c
 8000c14:	40000400 	.word	0x40000400

08000c18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0318 	add.w	r3, r7, #24
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a1e      	ldr	r2, [pc, #120]	; (8000cac <HAL_TIM_Base_MspInit+0x94>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d10c      	bne.n	8000c52 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <HAL_TIM_Base_MspInit+0x98>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a1c      	ldr	r2, [pc, #112]	; (8000cb0 <HAL_TIM_Base_MspInit+0x98>)
 8000c3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <HAL_TIM_Base_MspInit+0x98>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c50:	e028      	b.n	8000ca4 <HAL_TIM_Base_MspInit+0x8c>
  else if(tim_baseHandle->Instance==TIM3)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a17      	ldr	r2, [pc, #92]	; (8000cb4 <HAL_TIM_Base_MspInit+0x9c>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d123      	bne.n	8000ca4 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <HAL_TIM_Base_MspInit+0x98>)
 8000c5e:	69db      	ldr	r3, [r3, #28]
 8000c60:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <HAL_TIM_Base_MspInit+0x98>)
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	61d3      	str	r3, [r2, #28]
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <HAL_TIM_Base_MspInit+0x98>)
 8000c6a:	69db      	ldr	r3, [r3, #28]
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_TIM_Base_MspInit+0x98>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <HAL_TIM_Base_MspInit+0x98>)
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_TIM_Base_MspInit+0x98>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c8c:	2340      	movs	r3, #64	; 0x40
 8000c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 0318 	add.w	r3, r7, #24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <HAL_TIM_Base_MspInit+0xa0>)
 8000ca0:	f001 fae2 	bl	8002268 <HAL_GPIO_Init>
}
 8000ca4:	bf00      	nop
 8000ca6:	3728      	adds	r7, #40	; 0x28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40012c00 	.word	0x40012c00
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40000400 	.word	0x40000400
 8000cb8:	40010800 	.word	0x40010800

08000cbc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <MX_USART1_UART_Init+0x50>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_USART1_UART_Init+0x4c>)
 8000cf4:	f002 fda1 	bl	800383a <HAL_UART_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cfe:	f7ff fdcf 	bl	80008a0 <Error_Handler>
  }

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000214 	.word	0x20000214
 8000d0c:	40013800 	.word	0x40013800

08000d10 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <MX_USART2_UART_Init+0x50>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d48:	f002 fd77 	bl	800383a <HAL_UART_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d52:	f7ff fda5 	bl	80008a0 <Error_Handler>
  }

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000254 	.word	0x20000254
 8000d60:	40004400 	.word	0x40004400

08000d64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0318 	add.w	r3, r7, #24
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a5d      	ldr	r2, [pc, #372]	; (8000ef4 <HAL_UART_MspInit+0x190>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d158      	bne.n	8000e36 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d84:	4b5c      	ldr	r3, [pc, #368]	; (8000ef8 <HAL_UART_MspInit+0x194>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a5b      	ldr	r2, [pc, #364]	; (8000ef8 <HAL_UART_MspInit+0x194>)
 8000d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b59      	ldr	r3, [pc, #356]	; (8000ef8 <HAL_UART_MspInit+0x194>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	4b56      	ldr	r3, [pc, #344]	; (8000ef8 <HAL_UART_MspInit+0x194>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a55      	ldr	r2, [pc, #340]	; (8000ef8 <HAL_UART_MspInit+0x194>)
 8000da2:	f043 0304 	orr.w	r3, r3, #4
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b53      	ldr	r3, [pc, #332]	; (8000ef8 <HAL_UART_MspInit+0x194>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 0318 	add.w	r3, r7, #24
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	484c      	ldr	r0, [pc, #304]	; (8000efc <HAL_UART_MspInit+0x198>)
 8000dca:	f001 fa4d 	bl	8002268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	f107 0318 	add.w	r3, r7, #24
 8000de0:	4619      	mov	r1, r3
 8000de2:	4846      	ldr	r0, [pc, #280]	; (8000efc <HAL_UART_MspInit+0x198>)
 8000de4:	f001 fa40 	bl	8002268 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000de8:	4b45      	ldr	r3, [pc, #276]	; (8000f00 <HAL_UART_MspInit+0x19c>)
 8000dea:	4a46      	ldr	r2, [pc, #280]	; (8000f04 <HAL_UART_MspInit+0x1a0>)
 8000dec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dee:	4b44      	ldr	r3, [pc, #272]	; (8000f00 <HAL_UART_MspInit+0x19c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df4:	4b42      	ldr	r3, [pc, #264]	; (8000f00 <HAL_UART_MspInit+0x19c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dfa:	4b41      	ldr	r3, [pc, #260]	; (8000f00 <HAL_UART_MspInit+0x19c>)
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e00:	4b3f      	ldr	r3, [pc, #252]	; (8000f00 <HAL_UART_MspInit+0x19c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e06:	4b3e      	ldr	r3, [pc, #248]	; (8000f00 <HAL_UART_MspInit+0x19c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000e0c:	4b3c      	ldr	r3, [pc, #240]	; (8000f00 <HAL_UART_MspInit+0x19c>)
 8000e0e:	2220      	movs	r2, #32
 8000e10:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e12:	4b3b      	ldr	r3, [pc, #236]	; (8000f00 <HAL_UART_MspInit+0x19c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e18:	4839      	ldr	r0, [pc, #228]	; (8000f00 <HAL_UART_MspInit+0x19c>)
 8000e1a:	f000 ff73 	bl	8001d04 <HAL_DMA_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000e24:	f7ff fd3c 	bl	80008a0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a35      	ldr	r2, [pc, #212]	; (8000f00 <HAL_UART_MspInit+0x19c>)
 8000e2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e2e:	4a34      	ldr	r2, [pc, #208]	; (8000f00 <HAL_UART_MspInit+0x19c>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e34:	e05a      	b.n	8000eec <HAL_UART_MspInit+0x188>
  else if(uartHandle->Instance==USART2)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a33      	ldr	r2, [pc, #204]	; (8000f08 <HAL_UART_MspInit+0x1a4>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d155      	bne.n	8000eec <HAL_UART_MspInit+0x188>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e40:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <HAL_UART_MspInit+0x194>)
 8000e42:	69db      	ldr	r3, [r3, #28]
 8000e44:	4a2c      	ldr	r2, [pc, #176]	; (8000ef8 <HAL_UART_MspInit+0x194>)
 8000e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4a:	61d3      	str	r3, [r2, #28]
 8000e4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ef8 <HAL_UART_MspInit+0x194>)
 8000e4e:	69db      	ldr	r3, [r3, #28]
 8000e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <HAL_UART_MspInit+0x194>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a26      	ldr	r2, [pc, #152]	; (8000ef8 <HAL_UART_MspInit+0x194>)
 8000e5e:	f043 0304 	orr.w	r3, r3, #4
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <HAL_UART_MspInit+0x194>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e70:	2304      	movs	r3, #4
 8000e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 0318 	add.w	r3, r7, #24
 8000e80:	4619      	mov	r1, r3
 8000e82:	481e      	ldr	r0, [pc, #120]	; (8000efc <HAL_UART_MspInit+0x198>)
 8000e84:	f001 f9f0 	bl	8002268 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e88:	2308      	movs	r3, #8
 8000e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 0318 	add.w	r3, r7, #24
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4818      	ldr	r0, [pc, #96]	; (8000efc <HAL_UART_MspInit+0x198>)
 8000e9c:	f001 f9e4 	bl	8002268 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <HAL_UART_MspInit+0x1a8>)
 8000ea2:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <HAL_UART_MspInit+0x1ac>)
 8000ea4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea6:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <HAL_UART_MspInit+0x1a8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <HAL_UART_MspInit+0x1a8>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_UART_MspInit+0x1a8>)
 8000eb4:	2280      	movs	r2, #128	; 0x80
 8000eb6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <HAL_UART_MspInit+0x1a8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_UART_MspInit+0x1a8>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <HAL_UART_MspInit+0x1a8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_UART_MspInit+0x1a8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ed0:	480e      	ldr	r0, [pc, #56]	; (8000f0c <HAL_UART_MspInit+0x1a8>)
 8000ed2:	f000 ff17 	bl	8001d04 <HAL_DMA_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8000edc:	f7ff fce0 	bl	80008a0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <HAL_UART_MspInit+0x1a8>)
 8000ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ee6:	4a09      	ldr	r2, [pc, #36]	; (8000f0c <HAL_UART_MspInit+0x1a8>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	; 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40013800 	.word	0x40013800
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010800 	.word	0x40010800
 8000f00:	200001d0 	.word	0x200001d0
 8000f04:	40020058 	.word	0x40020058
 8000f08:	40004400 	.word	0x40004400
 8000f0c:	2000018c 	.word	0x2000018c
 8000f10:	4002006c 	.word	0x4002006c

08000f14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f14:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f16:	e003      	b.n	8000f20 <LoopCopyDataInit>

08000f18 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f1a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f1c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f1e:	3104      	adds	r1, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f20:	480a      	ldr	r0, [pc, #40]	; (8000f4c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f24:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f26:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f28:	d3f6      	bcc.n	8000f18 <CopyDataInit>
  ldr r2, =_sbss
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f2c:	e002      	b.n	8000f34 <LoopFillZerobss>

08000f2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f30:	f842 3b04 	str.w	r3, [r2], #4

08000f34 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f36:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f38:	d3f9      	bcc.n	8000f2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f3a:	f7ff fd75 	bl	8000a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f002 fdcb 	bl	8003ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f42:	f7ff fc33 	bl	80007ac <main>
  bx lr
 8000f46:	4770      	bx	lr
  ldr r3, =_sidata
 8000f48:	08003cf0 	.word	0x08003cf0
  ldr r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f50:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000f54:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000f58:	2000029c 	.word	0x2000029c

08000f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC1_2_IRQHandler>
	...

08000f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_Init+0x28>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <HAL_Init+0x28>)
 8000f6a:	f043 0310 	orr.w	r3, r3, #16
 8000f6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 fe69 	bl	8001c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 f808 	bl	8000f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f7c:	f7ff fc96 	bl	80008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40022000 	.word	0x40022000

08000f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x54>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x58>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fe81 	bl	8001cb2 <HAL_SYSTICK_Config>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00e      	b.n	8000fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	d80a      	bhi.n	8000fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f000 fe49 	bl	8001c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fcc:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <HAL_InitTick+0x5c>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e000      	b.n	8000fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000008 	.word	0x20000008
 8000fe8:	20000004 	.word	0x20000004

08000fec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <HAL_IncTick+0x1c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b05      	ldr	r3, [pc, #20]	; (800100c <HAL_IncTick+0x20>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a03      	ldr	r2, [pc, #12]	; (800100c <HAL_IncTick+0x20>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	20000008 	.word	0x20000008
 800100c:	20000294 	.word	0x20000294

08001010 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b02      	ldr	r3, [pc, #8]	; (8001020 <HAL_GetTick+0x10>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	20000294 	.word	0x20000294

08001024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800102c:	f7ff fff0 	bl	8001010 <HAL_GetTick>
 8001030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103c:	d005      	beq.n	800104a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_Delay+0x40>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104a:	bf00      	nop
 800104c:	f7ff ffe0 	bl	8001010 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	d8f7      	bhi.n	800104c <HAL_Delay+0x28>
  {
  }
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000008 	.word	0x20000008

08001068 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001070:	2300      	movs	r3, #0
 8001072:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e0ce      	b.n	8001228 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001094:	2b00      	cmp	r3, #0
 8001096:	d109      	bne.n	80010ac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff fa48 	bl	800053c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 f9bd 	bl	800142c <ADC_ConversionStop_Disable>
 80010b2:	4603      	mov	r3, r0
 80010b4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f040 80a9 	bne.w	8001216 <HAL_ADC_Init+0x1ae>
 80010c4:	7dfb      	ldrb	r3, [r7, #23]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f040 80a5 	bne.w	8001216 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010d4:	f023 0302 	bic.w	r3, r3, #2
 80010d8:	f043 0202 	orr.w	r2, r3, #2
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4951      	ldr	r1, [pc, #324]	; (8001230 <HAL_ADC_Init+0x1c8>)
 80010ea:	428b      	cmp	r3, r1
 80010ec:	d10a      	bne.n	8001104 <HAL_ADC_Init+0x9c>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80010f6:	d002      	beq.n	80010fe <HAL_ADC_Init+0x96>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	e004      	b.n	8001108 <HAL_ADC_Init+0xa0>
 80010fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001102:	e001      	b.n	8001108 <HAL_ADC_Init+0xa0>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001108:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7b1b      	ldrb	r3, [r3, #12]
 800110e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001110:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	4313      	orrs	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001120:	d003      	beq.n	800112a <HAL_ADC_Init+0xc2>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d102      	bne.n	8001130 <HAL_ADC_Init+0xc8>
 800112a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112e:	e000      	b.n	8001132 <HAL_ADC_Init+0xca>
 8001130:	2300      	movs	r3, #0
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7d1b      	ldrb	r3, [r3, #20]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d119      	bne.n	8001174 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7b1b      	ldrb	r3, [r3, #12]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d109      	bne.n	800115c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	3b01      	subs	r3, #1
 800114e:	035a      	lsls	r2, r3, #13
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	e00b      	b.n	8001174 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001160:	f043 0220 	orr.w	r2, r3, #32
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116c:	f043 0201 	orr.w	r2, r3, #1
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	430a      	orrs	r2, r1
 8001186:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	4b29      	ldr	r3, [pc, #164]	; (8001234 <HAL_ADC_Init+0x1cc>)
 8001190:	4013      	ands	r3, r2
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	6812      	ldr	r2, [r2, #0]
 8001196:	68b9      	ldr	r1, [r7, #8]
 8001198:	430b      	orrs	r3, r1
 800119a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011a4:	d003      	beq.n	80011ae <HAL_ADC_Init+0x146>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d104      	bne.n	80011b8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	051b      	lsls	r3, r3, #20
 80011b6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_ADC_Init+0x1d0>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d10b      	bne.n	80011f4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e6:	f023 0303 	bic.w	r3, r3, #3
 80011ea:	f043 0201 	orr.w	r2, r3, #1
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011f2:	e018      	b.n	8001226 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f8:	f023 0312 	bic.w	r3, r3, #18
 80011fc:	f043 0210 	orr.w	r2, r3, #16
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001208:	f043 0201 	orr.w	r2, r3, #1
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001214:	e007      	b.n	8001226 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121a:	f043 0210 	orr.w	r2, r3, #16
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001226:	7dfb      	ldrb	r3, [r7, #23]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40013c00 	.word	0x40013c00
 8001234:	ffe1f7fd 	.word	0xffe1f7fd
 8001238:	ff1f0efe 	.word	0xff1f0efe

0800123c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001254:	2b01      	cmp	r3, #1
 8001256:	d101      	bne.n	800125c <HAL_ADC_ConfigChannel+0x20>
 8001258:	2302      	movs	r3, #2
 800125a:	e0dc      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1da>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b06      	cmp	r3, #6
 800126a:	d81c      	bhi.n	80012a6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	3b05      	subs	r3, #5
 800127e:	221f      	movs	r2, #31
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	4019      	ands	r1, r3
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	3b05      	subs	r3, #5
 8001298:	fa00 f203 	lsl.w	r2, r0, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	635a      	str	r2, [r3, #52]	; 0x34
 80012a4:	e03c      	b.n	8001320 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b0c      	cmp	r3, #12
 80012ac:	d81c      	bhi.n	80012e8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	3b23      	subs	r3, #35	; 0x23
 80012c0:	221f      	movs	r2, #31
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	4019      	ands	r1, r3
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	3b23      	subs	r3, #35	; 0x23
 80012da:	fa00 f203 	lsl.w	r2, r0, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	631a      	str	r2, [r3, #48]	; 0x30
 80012e6:	e01b      	b.n	8001320 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	3b41      	subs	r3, #65	; 0x41
 80012fa:	221f      	movs	r2, #31
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	4019      	ands	r1, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	3b41      	subs	r3, #65	; 0x41
 8001314:	fa00 f203 	lsl.w	r2, r0, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	430a      	orrs	r2, r1
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b09      	cmp	r3, #9
 8001326:	d91c      	bls.n	8001362 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68d9      	ldr	r1, [r3, #12]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	3b1e      	subs	r3, #30
 800133a:	2207      	movs	r2, #7
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	4019      	ands	r1, r3
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	6898      	ldr	r0, [r3, #8]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4613      	mov	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4413      	add	r3, r2
 8001352:	3b1e      	subs	r3, #30
 8001354:	fa00 f203 	lsl.w	r2, r0, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	430a      	orrs	r2, r1
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	e019      	b.n	8001396 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6919      	ldr	r1, [r3, #16]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4613      	mov	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4413      	add	r3, r2
 8001372:	2207      	movs	r2, #7
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	4019      	ands	r1, r3
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	6898      	ldr	r0, [r3, #8]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	fa00 f203 	lsl.w	r2, r0, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b10      	cmp	r3, #16
 800139c:	d003      	beq.n	80013a6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013a2:	2b11      	cmp	r3, #17
 80013a4:	d132      	bne.n	800140c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1d      	ldr	r2, [pc, #116]	; (8001420 <HAL_ADC_ConfigChannel+0x1e4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d125      	bne.n	80013fc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d126      	bne.n	800140c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013cc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b10      	cmp	r3, #16
 80013d4:	d11a      	bne.n	800140c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <HAL_ADC_ConfigChannel+0x1e8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a13      	ldr	r2, [pc, #76]	; (8001428 <HAL_ADC_ConfigChannel+0x1ec>)
 80013dc:	fba2 2303 	umull	r2, r3, r2, r3
 80013e0:	0c9a      	lsrs	r2, r3, #18
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013ec:	e002      	b.n	80013f4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f9      	bne.n	80013ee <HAL_ADC_ConfigChannel+0x1b2>
 80013fa:	e007      	b.n	800140c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001400:	f043 0220 	orr.w	r2, r3, #32
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	40012400 	.word	0x40012400
 8001424:	20000000 	.word	0x20000000
 8001428:	431bde83 	.word	0x431bde83

0800142c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b01      	cmp	r3, #1
 8001444:	d127      	bne.n	8001496 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0201 	bic.w	r2, r2, #1
 8001454:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001456:	f7ff fddb 	bl	8001010 <HAL_GetTick>
 800145a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800145c:	e014      	b.n	8001488 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800145e:	f7ff fdd7 	bl	8001010 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d90d      	bls.n	8001488 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	f043 0210 	orr.w	r2, r3, #16
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	f043 0201 	orr.w	r2, r3, #1
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e007      	b.n	8001498 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b01      	cmp	r3, #1
 8001494:	d0e3      	beq.n	800145e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e0ed      	b.n	800168e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d102      	bne.n	80014c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff f8ae 	bl	8000620 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0202 	bic.w	r2, r2, #2
 80014d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d4:	f7ff fd9c 	bl	8001010 <HAL_GetTick>
 80014d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014da:	e012      	b.n	8001502 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014dc:	f7ff fd98 	bl	8001010 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b0a      	cmp	r3, #10
 80014e8:	d90b      	bls.n	8001502 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2205      	movs	r2, #5
 80014fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e0c5      	b.n	800168e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1e5      	bne.n	80014dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0201 	orr.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001520:	f7ff fd76 	bl	8001010 <HAL_GetTick>
 8001524:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001526:	e012      	b.n	800154e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001528:	f7ff fd72 	bl	8001010 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b0a      	cmp	r3, #10
 8001534:	d90b      	bls.n	800154e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2205      	movs	r2, #5
 8001546:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e09f      	b.n	800168e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0e5      	beq.n	8001528 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7e1b      	ldrb	r3, [r3, #24]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d108      	bne.n	8001576 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	e007      	b.n	8001586 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7e5b      	ldrb	r3, [r3, #25]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d108      	bne.n	80015a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	e007      	b.n	80015b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	7e9b      	ldrb	r3, [r3, #26]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d108      	bne.n	80015ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0220 	orr.w	r2, r2, #32
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e007      	b.n	80015da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0220 	bic.w	r2, r2, #32
 80015d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7edb      	ldrb	r3, [r3, #27]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d108      	bne.n	80015f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0210 	bic.w	r2, r2, #16
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	e007      	b.n	8001604 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0210 	orr.w	r2, r2, #16
 8001602:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7f1b      	ldrb	r3, [r3, #28]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d108      	bne.n	800161e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0208 	orr.w	r2, r2, #8
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	e007      	b.n	800162e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0208 	bic.w	r2, r2, #8
 800162c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	7f5b      	ldrb	r3, [r3, #29]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d108      	bne.n	8001648 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f042 0204 	orr.w	r2, r2, #4
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	e007      	b.n	8001658 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0204 	bic.w	r2, r2, #4
 8001656:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	ea42 0103 	orr.w	r1, r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	1e5a      	subs	r2, r3, #1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001696:	b480      	push	{r7}
 8001698:	b087      	sub	sp, #28
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ac:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80016ae:	7cfb      	ldrb	r3, [r7, #19]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d003      	beq.n	80016bc <HAL_CAN_ConfigFilter+0x26>
 80016b4:	7cfb      	ldrb	r3, [r7, #19]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	f040 80aa 	bne.w	8001810 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016c2:	f043 0201 	orr.w	r2, r3, #1
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	f003 031f 	and.w	r3, r3, #31
 80016d4:	2201      	movs	r2, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	401a      	ands	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d123      	bne.n	800173e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	43db      	mvns	r3, r3
 8001700:	401a      	ands	r2, r3
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001718:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3248      	adds	r2, #72	; 0x48
 800171e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001732:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001734:	6979      	ldr	r1, [r7, #20]
 8001736:	3348      	adds	r3, #72	; 0x48
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	440b      	add	r3, r1
 800173c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d122      	bne.n	800178c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	431a      	orrs	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001766:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	3248      	adds	r2, #72	; 0x48
 800176c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001780:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001782:	6979      	ldr	r1, [r7, #20]
 8001784:	3348      	adds	r3, #72	; 0x48
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	440b      	add	r3, r1
 800178a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d109      	bne.n	80017a8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	43db      	mvns	r3, r3
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80017a6:	e007      	b.n	80017b8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	431a      	orrs	r2, r3
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d109      	bne.n	80017d4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	401a      	ands	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80017d2:	e007      	b.n	80017e4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	431a      	orrs	r2, r3
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d107      	bne.n	80017fc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	431a      	orrs	r2, r3
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001802:	f023 0201 	bic.w	r2, r3, #1
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	e006      	b.n	800181e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
  }
}
 800181e:	4618      	mov	r0, r3
 8001820:	371c      	adds	r7, #28
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b01      	cmp	r3, #1
 800183a:	d12e      	bne.n	800189a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2202      	movs	r2, #2
 8001840:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0201 	bic.w	r2, r2, #1
 8001852:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001854:	f7ff fbdc 	bl	8001010 <HAL_GetTick>
 8001858:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800185a:	e012      	b.n	8001882 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800185c:	f7ff fbd8 	bl	8001010 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b0a      	cmp	r3, #10
 8001868:	d90b      	bls.n	8001882 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2205      	movs	r2, #5
 800187a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e012      	b.n	80018a8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1e5      	bne.n	800185c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e006      	b.n	80018a8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
  }
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80018ce:	7ffb      	ldrb	r3, [r7, #31]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d003      	beq.n	80018dc <HAL_CAN_AddTxMessage+0x2c>
 80018d4:	7ffb      	ldrb	r3, [r7, #31]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	f040 80b8 	bne.w	8001a4c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10a      	bne.n	80018fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d105      	bne.n	80018fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 80a0 	beq.w	8001a3c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	0e1b      	lsrs	r3, r3, #24
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2b02      	cmp	r3, #2
 800190a:	d907      	bls.n	800191c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e09e      	b.n	8001a5a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800191c:	2201      	movs	r2, #1
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	409a      	lsls	r2, r3
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10d      	bne.n	800194a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001938:	68f9      	ldr	r1, [r7, #12]
 800193a:	6809      	ldr	r1, [r1, #0]
 800193c:	431a      	orrs	r2, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3318      	adds	r3, #24
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	440b      	add	r3, r1
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	e00f      	b.n	800196a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001954:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800195a:	68f9      	ldr	r1, [r7, #12]
 800195c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800195e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	3318      	adds	r3, #24
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	440b      	add	r3, r1
 8001968:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6819      	ldr	r1, [r3, #0]
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	691a      	ldr	r2, [r3, #16]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3318      	adds	r3, #24
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	440b      	add	r3, r1
 800197a:	3304      	adds	r3, #4
 800197c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	7d1b      	ldrb	r3, [r3, #20]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d111      	bne.n	80019aa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3318      	adds	r3, #24
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	4413      	add	r3, r2
 8001992:	3304      	adds	r3, #4
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	6811      	ldr	r1, [r2, #0]
 800199a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	3318      	adds	r3, #24
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	440b      	add	r3, r1
 80019a6:	3304      	adds	r3, #4
 80019a8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3307      	adds	r3, #7
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	061a      	lsls	r2, r3, #24
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3306      	adds	r3, #6
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	041b      	lsls	r3, r3, #16
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3305      	adds	r3, #5
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	021b      	lsls	r3, r3, #8
 80019c4:	4313      	orrs	r3, r2
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	3204      	adds	r2, #4
 80019ca:	7812      	ldrb	r2, [r2, #0]
 80019cc:	4610      	mov	r0, r2
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	6811      	ldr	r1, [r2, #0]
 80019d2:	ea43 0200 	orr.w	r2, r3, r0
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	440b      	add	r3, r1
 80019dc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80019e0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3303      	adds	r3, #3
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	061a      	lsls	r2, r3, #24
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3302      	adds	r3, #2
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	041b      	lsls	r3, r3, #16
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3301      	adds	r3, #1
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	4313      	orrs	r3, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	7812      	ldrb	r2, [r2, #0]
 8001a02:	4610      	mov	r0, r2
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	6811      	ldr	r1, [r2, #0]
 8001a08:	ea43 0200 	orr.w	r2, r3, r0
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	011b      	lsls	r3, r3, #4
 8001a10:	440b      	add	r3, r1
 8001a12:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001a16:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	3318      	adds	r3, #24
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	4413      	add	r3, r2
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	6811      	ldr	r1, [r2, #0]
 8001a2a:	f043 0201 	orr.w	r2, r3, #1
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3318      	adds	r3, #24
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	440b      	add	r3, r1
 8001a36:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e00e      	b.n	8001a5a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e006      	b.n	8001a5a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
  }
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3724      	adds	r7, #36	; 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a74:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d002      	beq.n	8001a82 <HAL_CAN_ActivateNotification+0x1e>
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d109      	bne.n	8001a96 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6959      	ldr	r1, [r3, #20]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e006      	b.n	8001aa4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
  }
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
	...

08001ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001acc:	4013      	ands	r3, r2
 8001ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae2:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	60d3      	str	r3, [r2, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <__NVIC_GetPriorityGrouping+0x18>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	f003 0307 	and.w	r3, r3, #7
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	db0b      	blt.n	8001b3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	f003 021f 	and.w	r2, r3, #31
 8001b2c:	4906      	ldr	r1, [pc, #24]	; (8001b48 <__NVIC_EnableIRQ+0x34>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	2001      	movs	r0, #1
 8001b36:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	e000e100 	.word	0xe000e100

08001b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0a      	blt.n	8001b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	490c      	ldr	r1, [pc, #48]	; (8001b98 <__NVIC_SetPriority+0x4c>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b74:	e00a      	b.n	8001b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4908      	ldr	r1, [pc, #32]	; (8001b9c <__NVIC_SetPriority+0x50>)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	3b04      	subs	r3, #4
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	761a      	strb	r2, [r3, #24]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000e100 	.word	0xe000e100
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f1c3 0307 	rsb	r3, r3, #7
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	bf28      	it	cs
 8001bbe:	2304      	movcs	r3, #4
 8001bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d902      	bls.n	8001bd0 <NVIC_EncodePriority+0x30>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3b03      	subs	r3, #3
 8001bce:	e000      	b.n	8001bd2 <NVIC_EncodePriority+0x32>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	4313      	orrs	r3, r2
         );
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	; 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c14:	d301      	bcc.n	8001c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00f      	b.n	8001c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <SysTick_Config+0x40>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c22:	210f      	movs	r1, #15
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f7ff ff90 	bl	8001b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <SysTick_Config+0x40>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <SysTick_Config+0x40>)
 8001c34:	2207      	movs	r2, #7
 8001c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	e000e010 	.word	0xe000e010

08001c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff2d 	bl	8001ab0 <__NVIC_SetPriorityGrouping>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c70:	f7ff ff42 	bl	8001af8 <__NVIC_GetPriorityGrouping>
 8001c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	6978      	ldr	r0, [r7, #20]
 8001c7c:	f7ff ff90 	bl	8001ba0 <NVIC_EncodePriority>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff5f 	bl	8001b4c <__NVIC_SetPriority>
}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff35 	bl	8001b14 <__NVIC_EnableIRQ>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ffa2 	bl	8001c04 <SysTick_Config>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e00e      	b.n	8001cfa <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	795b      	ldrb	r3, [r3, #5]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d105      	bne.n	8001cf2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7fe fcf7 	bl	80006e0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e059      	b.n	8001dce <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <HAL_DMA_Init+0xd4>)
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d80f      	bhi.n	8001d46 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <HAL_DMA_Init+0xd8>)
 8001d2e:	4413      	add	r3, r2
 8001d30:	4a2b      	ldr	r2, [pc, #172]	; (8001de0 <HAL_DMA_Init+0xdc>)
 8001d32:	fba2 2303 	umull	r2, r3, r2, r3
 8001d36:	091b      	lsrs	r3, r3, #4
 8001d38:	009a      	lsls	r2, r3, #2
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a28      	ldr	r2, [pc, #160]	; (8001de4 <HAL_DMA_Init+0xe0>)
 8001d42:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d44:	e00e      	b.n	8001d64 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4b26      	ldr	r3, [pc, #152]	; (8001de8 <HAL_DMA_Init+0xe4>)
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a23      	ldr	r2, [pc, #140]	; (8001de0 <HAL_DMA_Init+0xdc>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	091b      	lsrs	r3, r3, #4
 8001d58:	009a      	lsls	r2, r3, #2
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a22      	ldr	r2, [pc, #136]	; (8001dec <HAL_DMA_Init+0xe8>)
 8001d62:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d7a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	40020407 	.word	0x40020407
 8001ddc:	bffdfff8 	.word	0xbffdfff8
 8001de0:	cccccccd 	.word	0xcccccccd
 8001de4:	40020000 	.word	0x40020000
 8001de8:	bffdfbf8 	.word	0xbffdfbf8
 8001dec:	40020400 	.word	0x40020400

08001df0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 80d6 	beq.w	8001fc6 <HAL_DMA_IRQHandler+0x1d6>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80d0 	beq.w	8001fc6 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0320 	and.w	r3, r3, #32
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d107      	bne.n	8001e44 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0204 	bic.w	r2, r2, #4
 8001e42:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b9b      	ldr	r3, [pc, #620]	; (80020b8 <HAL_DMA_IRQHandler+0x2c8>)
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d958      	bls.n	8001f02 <HAL_DMA_IRQHandler+0x112>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a99      	ldr	r2, [pc, #612]	; (80020bc <HAL_DMA_IRQHandler+0x2cc>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d04f      	beq.n	8001efa <HAL_DMA_IRQHandler+0x10a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a98      	ldr	r2, [pc, #608]	; (80020c0 <HAL_DMA_IRQHandler+0x2d0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d048      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0x106>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a96      	ldr	r2, [pc, #600]	; (80020c4 <HAL_DMA_IRQHandler+0x2d4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d040      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x100>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a95      	ldr	r2, [pc, #596]	; (80020c8 <HAL_DMA_IRQHandler+0x2d8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d038      	beq.n	8001eea <HAL_DMA_IRQHandler+0xfa>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a93      	ldr	r2, [pc, #588]	; (80020cc <HAL_DMA_IRQHandler+0x2dc>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d030      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0xf4>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a92      	ldr	r2, [pc, #584]	; (80020d0 <HAL_DMA_IRQHandler+0x2e0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d028      	beq.n	8001ede <HAL_DMA_IRQHandler+0xee>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a89      	ldr	r2, [pc, #548]	; (80020b8 <HAL_DMA_IRQHandler+0x2c8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d020      	beq.n	8001ed8 <HAL_DMA_IRQHandler+0xe8>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a8e      	ldr	r2, [pc, #568]	; (80020d4 <HAL_DMA_IRQHandler+0x2e4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d019      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0xe4>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a8c      	ldr	r2, [pc, #560]	; (80020d8 <HAL_DMA_IRQHandler+0x2e8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d012      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0xe0>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a8b      	ldr	r2, [pc, #556]	; (80020dc <HAL_DMA_IRQHandler+0x2ec>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00a      	beq.n	8001eca <HAL_DMA_IRQHandler+0xda>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a89      	ldr	r2, [pc, #548]	; (80020e0 <HAL_DMA_IRQHandler+0x2f0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d102      	bne.n	8001ec4 <HAL_DMA_IRQHandler+0xd4>
 8001ebe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ec2:	e01b      	b.n	8001efc <HAL_DMA_IRQHandler+0x10c>
 8001ec4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ec8:	e018      	b.n	8001efc <HAL_DMA_IRQHandler+0x10c>
 8001eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ece:	e015      	b.n	8001efc <HAL_DMA_IRQHandler+0x10c>
 8001ed0:	2340      	movs	r3, #64	; 0x40
 8001ed2:	e013      	b.n	8001efc <HAL_DMA_IRQHandler+0x10c>
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	e011      	b.n	8001efc <HAL_DMA_IRQHandler+0x10c>
 8001ed8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001edc:	e00e      	b.n	8001efc <HAL_DMA_IRQHandler+0x10c>
 8001ede:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ee2:	e00b      	b.n	8001efc <HAL_DMA_IRQHandler+0x10c>
 8001ee4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ee8:	e008      	b.n	8001efc <HAL_DMA_IRQHandler+0x10c>
 8001eea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001eee:	e005      	b.n	8001efc <HAL_DMA_IRQHandler+0x10c>
 8001ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef4:	e002      	b.n	8001efc <HAL_DMA_IRQHandler+0x10c>
 8001ef6:	2340      	movs	r3, #64	; 0x40
 8001ef8:	e000      	b.n	8001efc <HAL_DMA_IRQHandler+0x10c>
 8001efa:	2304      	movs	r3, #4
 8001efc:	4a79      	ldr	r2, [pc, #484]	; (80020e4 <HAL_DMA_IRQHandler+0x2f4>)
 8001efe:	6053      	str	r3, [r2, #4]
 8001f00:	e057      	b.n	8001fb2 <HAL_DMA_IRQHandler+0x1c2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a6d      	ldr	r2, [pc, #436]	; (80020bc <HAL_DMA_IRQHandler+0x2cc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d04f      	beq.n	8001fac <HAL_DMA_IRQHandler+0x1bc>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a6b      	ldr	r2, [pc, #428]	; (80020c0 <HAL_DMA_IRQHandler+0x2d0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d048      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x1b8>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a6a      	ldr	r2, [pc, #424]	; (80020c4 <HAL_DMA_IRQHandler+0x2d4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d040      	beq.n	8001fa2 <HAL_DMA_IRQHandler+0x1b2>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a68      	ldr	r2, [pc, #416]	; (80020c8 <HAL_DMA_IRQHandler+0x2d8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d038      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x1ac>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a67      	ldr	r2, [pc, #412]	; (80020cc <HAL_DMA_IRQHandler+0x2dc>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d030      	beq.n	8001f96 <HAL_DMA_IRQHandler+0x1a6>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a65      	ldr	r2, [pc, #404]	; (80020d0 <HAL_DMA_IRQHandler+0x2e0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d028      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x1a0>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a5d      	ldr	r2, [pc, #372]	; (80020b8 <HAL_DMA_IRQHandler+0x2c8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d020      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x19a>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a61      	ldr	r2, [pc, #388]	; (80020d4 <HAL_DMA_IRQHandler+0x2e4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d019      	beq.n	8001f86 <HAL_DMA_IRQHandler+0x196>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a60      	ldr	r2, [pc, #384]	; (80020d8 <HAL_DMA_IRQHandler+0x2e8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d012      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x192>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a5e      	ldr	r2, [pc, #376]	; (80020dc <HAL_DMA_IRQHandler+0x2ec>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00a      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x18c>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a5d      	ldr	r2, [pc, #372]	; (80020e0 <HAL_DMA_IRQHandler+0x2f0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d102      	bne.n	8001f76 <HAL_DMA_IRQHandler+0x186>
 8001f70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f74:	e01b      	b.n	8001fae <HAL_DMA_IRQHandler+0x1be>
 8001f76:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f7a:	e018      	b.n	8001fae <HAL_DMA_IRQHandler+0x1be>
 8001f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f80:	e015      	b.n	8001fae <HAL_DMA_IRQHandler+0x1be>
 8001f82:	2340      	movs	r3, #64	; 0x40
 8001f84:	e013      	b.n	8001fae <HAL_DMA_IRQHandler+0x1be>
 8001f86:	2304      	movs	r3, #4
 8001f88:	e011      	b.n	8001fae <HAL_DMA_IRQHandler+0x1be>
 8001f8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f8e:	e00e      	b.n	8001fae <HAL_DMA_IRQHandler+0x1be>
 8001f90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f94:	e00b      	b.n	8001fae <HAL_DMA_IRQHandler+0x1be>
 8001f96:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f9a:	e008      	b.n	8001fae <HAL_DMA_IRQHandler+0x1be>
 8001f9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fa0:	e005      	b.n	8001fae <HAL_DMA_IRQHandler+0x1be>
 8001fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa6:	e002      	b.n	8001fae <HAL_DMA_IRQHandler+0x1be>
 8001fa8:	2340      	movs	r3, #64	; 0x40
 8001faa:	e000      	b.n	8001fae <HAL_DMA_IRQHandler+0x1be>
 8001fac:	2304      	movs	r3, #4
 8001fae:	4a4e      	ldr	r2, [pc, #312]	; (80020e8 <HAL_DMA_IRQHandler+0x2f8>)
 8001fb0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8136 	beq.w	8002228 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001fc4:	e130      	b.n	8002228 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	2202      	movs	r2, #2
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 80f8 	beq.w	80021c8 <HAL_DMA_IRQHandler+0x3d8>
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 80f2 	beq.w	80021c8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10b      	bne.n	800200a <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 020a 	bic.w	r2, r2, #10
 8002000:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <HAL_DMA_IRQHandler+0x2c8>)
 8002012:	429a      	cmp	r2, r3
 8002014:	d973      	bls.n	80020fe <HAL_DMA_IRQHandler+0x30e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a28      	ldr	r2, [pc, #160]	; (80020bc <HAL_DMA_IRQHandler+0x2cc>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d06a      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x306>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a26      	ldr	r2, [pc, #152]	; (80020c0 <HAL_DMA_IRQHandler+0x2d0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d063      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x302>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a25      	ldr	r2, [pc, #148]	; (80020c4 <HAL_DMA_IRQHandler+0x2d4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d05b      	beq.n	80020ec <HAL_DMA_IRQHandler+0x2fc>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a23      	ldr	r2, [pc, #140]	; (80020c8 <HAL_DMA_IRQHandler+0x2d8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d038      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x2c0>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a22      	ldr	r2, [pc, #136]	; (80020cc <HAL_DMA_IRQHandler+0x2dc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d030      	beq.n	80020aa <HAL_DMA_IRQHandler+0x2ba>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a20      	ldr	r2, [pc, #128]	; (80020d0 <HAL_DMA_IRQHandler+0x2e0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d028      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x2b4>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a18      	ldr	r2, [pc, #96]	; (80020b8 <HAL_DMA_IRQHandler+0x2c8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d020      	beq.n	800209e <HAL_DMA_IRQHandler+0x2ae>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <HAL_DMA_IRQHandler+0x2e4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d019      	beq.n	800209a <HAL_DMA_IRQHandler+0x2aa>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a1b      	ldr	r2, [pc, #108]	; (80020d8 <HAL_DMA_IRQHandler+0x2e8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d012      	beq.n	8002096 <HAL_DMA_IRQHandler+0x2a6>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a19      	ldr	r2, [pc, #100]	; (80020dc <HAL_DMA_IRQHandler+0x2ec>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00a      	beq.n	8002090 <HAL_DMA_IRQHandler+0x2a0>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a18      	ldr	r2, [pc, #96]	; (80020e0 <HAL_DMA_IRQHandler+0x2f0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d102      	bne.n	800208a <HAL_DMA_IRQHandler+0x29a>
 8002084:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002088:	e036      	b.n	80020f8 <HAL_DMA_IRQHandler+0x308>
 800208a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800208e:	e033      	b.n	80020f8 <HAL_DMA_IRQHandler+0x308>
 8002090:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002094:	e030      	b.n	80020f8 <HAL_DMA_IRQHandler+0x308>
 8002096:	2320      	movs	r3, #32
 8002098:	e02e      	b.n	80020f8 <HAL_DMA_IRQHandler+0x308>
 800209a:	2302      	movs	r3, #2
 800209c:	e02c      	b.n	80020f8 <HAL_DMA_IRQHandler+0x308>
 800209e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020a2:	e029      	b.n	80020f8 <HAL_DMA_IRQHandler+0x308>
 80020a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020a8:	e026      	b.n	80020f8 <HAL_DMA_IRQHandler+0x308>
 80020aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ae:	e023      	b.n	80020f8 <HAL_DMA_IRQHandler+0x308>
 80020b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020b4:	e020      	b.n	80020f8 <HAL_DMA_IRQHandler+0x308>
 80020b6:	bf00      	nop
 80020b8:	40020080 	.word	0x40020080
 80020bc:	40020008 	.word	0x40020008
 80020c0:	4002001c 	.word	0x4002001c
 80020c4:	40020030 	.word	0x40020030
 80020c8:	40020044 	.word	0x40020044
 80020cc:	40020058 	.word	0x40020058
 80020d0:	4002006c 	.word	0x4002006c
 80020d4:	40020408 	.word	0x40020408
 80020d8:	4002041c 	.word	0x4002041c
 80020dc:	40020430 	.word	0x40020430
 80020e0:	40020444 	.word	0x40020444
 80020e4:	40020400 	.word	0x40020400
 80020e8:	40020000 	.word	0x40020000
 80020ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020f0:	e002      	b.n	80020f8 <HAL_DMA_IRQHandler+0x308>
 80020f2:	2320      	movs	r3, #32
 80020f4:	e000      	b.n	80020f8 <HAL_DMA_IRQHandler+0x308>
 80020f6:	2302      	movs	r3, #2
 80020f8:	4a4e      	ldr	r2, [pc, #312]	; (8002234 <HAL_DMA_IRQHandler+0x444>)
 80020fa:	6053      	str	r3, [r2, #4]
 80020fc:	e057      	b.n	80021ae <HAL_DMA_IRQHandler+0x3be>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a4d      	ldr	r2, [pc, #308]	; (8002238 <HAL_DMA_IRQHandler+0x448>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d04f      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x3b8>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a4b      	ldr	r2, [pc, #300]	; (800223c <HAL_DMA_IRQHandler+0x44c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d048      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x3b4>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a4a      	ldr	r2, [pc, #296]	; (8002240 <HAL_DMA_IRQHandler+0x450>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d040      	beq.n	800219e <HAL_DMA_IRQHandler+0x3ae>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a48      	ldr	r2, [pc, #288]	; (8002244 <HAL_DMA_IRQHandler+0x454>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d038      	beq.n	8002198 <HAL_DMA_IRQHandler+0x3a8>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a47      	ldr	r2, [pc, #284]	; (8002248 <HAL_DMA_IRQHandler+0x458>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d030      	beq.n	8002192 <HAL_DMA_IRQHandler+0x3a2>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a45      	ldr	r2, [pc, #276]	; (800224c <HAL_DMA_IRQHandler+0x45c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d028      	beq.n	800218c <HAL_DMA_IRQHandler+0x39c>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a44      	ldr	r2, [pc, #272]	; (8002250 <HAL_DMA_IRQHandler+0x460>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d020      	beq.n	8002186 <HAL_DMA_IRQHandler+0x396>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a42      	ldr	r2, [pc, #264]	; (8002254 <HAL_DMA_IRQHandler+0x464>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d019      	beq.n	8002182 <HAL_DMA_IRQHandler+0x392>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a41      	ldr	r2, [pc, #260]	; (8002258 <HAL_DMA_IRQHandler+0x468>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d012      	beq.n	800217e <HAL_DMA_IRQHandler+0x38e>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a3f      	ldr	r2, [pc, #252]	; (800225c <HAL_DMA_IRQHandler+0x46c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00a      	beq.n	8002178 <HAL_DMA_IRQHandler+0x388>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a3e      	ldr	r2, [pc, #248]	; (8002260 <HAL_DMA_IRQHandler+0x470>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d102      	bne.n	8002172 <HAL_DMA_IRQHandler+0x382>
 800216c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002170:	e01b      	b.n	80021aa <HAL_DMA_IRQHandler+0x3ba>
 8002172:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002176:	e018      	b.n	80021aa <HAL_DMA_IRQHandler+0x3ba>
 8002178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800217c:	e015      	b.n	80021aa <HAL_DMA_IRQHandler+0x3ba>
 800217e:	2320      	movs	r3, #32
 8002180:	e013      	b.n	80021aa <HAL_DMA_IRQHandler+0x3ba>
 8002182:	2302      	movs	r3, #2
 8002184:	e011      	b.n	80021aa <HAL_DMA_IRQHandler+0x3ba>
 8002186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800218a:	e00e      	b.n	80021aa <HAL_DMA_IRQHandler+0x3ba>
 800218c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002190:	e00b      	b.n	80021aa <HAL_DMA_IRQHandler+0x3ba>
 8002192:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002196:	e008      	b.n	80021aa <HAL_DMA_IRQHandler+0x3ba>
 8002198:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800219c:	e005      	b.n	80021aa <HAL_DMA_IRQHandler+0x3ba>
 800219e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021a2:	e002      	b.n	80021aa <HAL_DMA_IRQHandler+0x3ba>
 80021a4:	2320      	movs	r3, #32
 80021a6:	e000      	b.n	80021aa <HAL_DMA_IRQHandler+0x3ba>
 80021a8:	2302      	movs	r3, #2
 80021aa:	4a2e      	ldr	r2, [pc, #184]	; (8002264 <HAL_DMA_IRQHandler+0x474>)
 80021ac:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d034      	beq.n	8002228 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80021c6:	e02f      	b.n	8002228 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	2208      	movs	r2, #8
 80021ce:	409a      	lsls	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d028      	beq.n	800222a <HAL_DMA_IRQHandler+0x43a>
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d023      	beq.n	800222a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 020e 	bic.w	r2, r2, #14
 80021f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	2101      	movs	r1, #1
 80021fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002200:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	2b00      	cmp	r3, #0
 800221e:	d004      	beq.n	800222a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	4798      	blx	r3
    }
  }
  return;
 8002228:	bf00      	nop
 800222a:	bf00      	nop
}
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40020400 	.word	0x40020400
 8002238:	40020008 	.word	0x40020008
 800223c:	4002001c 	.word	0x4002001c
 8002240:	40020030 	.word	0x40020030
 8002244:	40020044 	.word	0x40020044
 8002248:	40020058 	.word	0x40020058
 800224c:	4002006c 	.word	0x4002006c
 8002250:	40020080 	.word	0x40020080
 8002254:	40020408 	.word	0x40020408
 8002258:	4002041c 	.word	0x4002041c
 800225c:	40020430 	.word	0x40020430
 8002260:	40020444 	.word	0x40020444
 8002264:	40020000 	.word	0x40020000

08002268 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002268:	b480      	push	{r7}
 800226a:	b08b      	sub	sp, #44	; 0x2c
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002276:	2300      	movs	r3, #0
 8002278:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800227a:	e133      	b.n	80024e4 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800227c:	2201      	movs	r2, #1
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	69fa      	ldr	r2, [r7, #28]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	429a      	cmp	r2, r3
 8002296:	f040 8122 	bne.w	80024de <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b12      	cmp	r3, #18
 80022a0:	d034      	beq.n	800230c <HAL_GPIO_Init+0xa4>
 80022a2:	2b12      	cmp	r3, #18
 80022a4:	d80d      	bhi.n	80022c2 <HAL_GPIO_Init+0x5a>
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d02b      	beq.n	8002302 <HAL_GPIO_Init+0x9a>
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d804      	bhi.n	80022b8 <HAL_GPIO_Init+0x50>
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d031      	beq.n	8002316 <HAL_GPIO_Init+0xae>
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d01c      	beq.n	80022f0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022b6:	e048      	b.n	800234a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d043      	beq.n	8002344 <HAL_GPIO_Init+0xdc>
 80022bc:	2b11      	cmp	r3, #17
 80022be:	d01b      	beq.n	80022f8 <HAL_GPIO_Init+0x90>
          break;
 80022c0:	e043      	b.n	800234a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80022c2:	4a8f      	ldr	r2, [pc, #572]	; (8002500 <HAL_GPIO_Init+0x298>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d026      	beq.n	8002316 <HAL_GPIO_Init+0xae>
 80022c8:	4a8d      	ldr	r2, [pc, #564]	; (8002500 <HAL_GPIO_Init+0x298>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d806      	bhi.n	80022dc <HAL_GPIO_Init+0x74>
 80022ce:	4a8d      	ldr	r2, [pc, #564]	; (8002504 <HAL_GPIO_Init+0x29c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d020      	beq.n	8002316 <HAL_GPIO_Init+0xae>
 80022d4:	4a8c      	ldr	r2, [pc, #560]	; (8002508 <HAL_GPIO_Init+0x2a0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01d      	beq.n	8002316 <HAL_GPIO_Init+0xae>
          break;
 80022da:	e036      	b.n	800234a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80022dc:	4a8b      	ldr	r2, [pc, #556]	; (800250c <HAL_GPIO_Init+0x2a4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d019      	beq.n	8002316 <HAL_GPIO_Init+0xae>
 80022e2:	4a8b      	ldr	r2, [pc, #556]	; (8002510 <HAL_GPIO_Init+0x2a8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d016      	beq.n	8002316 <HAL_GPIO_Init+0xae>
 80022e8:	4a8a      	ldr	r2, [pc, #552]	; (8002514 <HAL_GPIO_Init+0x2ac>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d013      	beq.n	8002316 <HAL_GPIO_Init+0xae>
          break;
 80022ee:	e02c      	b.n	800234a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	623b      	str	r3, [r7, #32]
          break;
 80022f6:	e028      	b.n	800234a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	3304      	adds	r3, #4
 80022fe:	623b      	str	r3, [r7, #32]
          break;
 8002300:	e023      	b.n	800234a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	3308      	adds	r3, #8
 8002308:	623b      	str	r3, [r7, #32]
          break;
 800230a:	e01e      	b.n	800234a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	330c      	adds	r3, #12
 8002312:	623b      	str	r3, [r7, #32]
          break;
 8002314:	e019      	b.n	800234a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d102      	bne.n	8002324 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800231e:	2304      	movs	r3, #4
 8002320:	623b      	str	r3, [r7, #32]
          break;
 8002322:	e012      	b.n	800234a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800232c:	2308      	movs	r3, #8
 800232e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	611a      	str	r2, [r3, #16]
          break;
 8002336:	e008      	b.n	800234a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002338:	2308      	movs	r3, #8
 800233a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	615a      	str	r2, [r3, #20]
          break;
 8002342:	e002      	b.n	800234a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002344:	2300      	movs	r3, #0
 8002346:	623b      	str	r3, [r7, #32]
          break;
 8002348:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	2bff      	cmp	r3, #255	; 0xff
 800234e:	d801      	bhi.n	8002354 <HAL_GPIO_Init+0xec>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	e001      	b.n	8002358 <HAL_GPIO_Init+0xf0>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3304      	adds	r3, #4
 8002358:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	2bff      	cmp	r3, #255	; 0xff
 800235e:	d802      	bhi.n	8002366 <HAL_GPIO_Init+0xfe>
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	e002      	b.n	800236c <HAL_GPIO_Init+0x104>
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	3b08      	subs	r3, #8
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	210f      	movs	r1, #15
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	401a      	ands	r2, r3
 800237e:	6a39      	ldr	r1, [r7, #32]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	fa01 f303 	lsl.w	r3, r1, r3
 8002386:	431a      	orrs	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80a2 	beq.w	80024de <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800239a:	4b5f      	ldr	r3, [pc, #380]	; (8002518 <HAL_GPIO_Init+0x2b0>)
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	4a5e      	ldr	r2, [pc, #376]	; (8002518 <HAL_GPIO_Init+0x2b0>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6193      	str	r3, [r2, #24]
 80023a6:	4b5c      	ldr	r3, [pc, #368]	; (8002518 <HAL_GPIO_Init+0x2b0>)
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023b2:	4a5a      	ldr	r2, [pc, #360]	; (800251c <HAL_GPIO_Init+0x2b4>)
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	3302      	adds	r3, #2
 80023ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023be:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	220f      	movs	r2, #15
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	4013      	ands	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a51      	ldr	r2, [pc, #324]	; (8002520 <HAL_GPIO_Init+0x2b8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d01f      	beq.n	800241e <HAL_GPIO_Init+0x1b6>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a50      	ldr	r2, [pc, #320]	; (8002524 <HAL_GPIO_Init+0x2bc>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d019      	beq.n	800241a <HAL_GPIO_Init+0x1b2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4f      	ldr	r2, [pc, #316]	; (8002528 <HAL_GPIO_Init+0x2c0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <HAL_GPIO_Init+0x1ae>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4e      	ldr	r2, [pc, #312]	; (800252c <HAL_GPIO_Init+0x2c4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00d      	beq.n	8002412 <HAL_GPIO_Init+0x1aa>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4d      	ldr	r2, [pc, #308]	; (8002530 <HAL_GPIO_Init+0x2c8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d007      	beq.n	800240e <HAL_GPIO_Init+0x1a6>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4c      	ldr	r2, [pc, #304]	; (8002534 <HAL_GPIO_Init+0x2cc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d101      	bne.n	800240a <HAL_GPIO_Init+0x1a2>
 8002406:	2305      	movs	r3, #5
 8002408:	e00a      	b.n	8002420 <HAL_GPIO_Init+0x1b8>
 800240a:	2306      	movs	r3, #6
 800240c:	e008      	b.n	8002420 <HAL_GPIO_Init+0x1b8>
 800240e:	2304      	movs	r3, #4
 8002410:	e006      	b.n	8002420 <HAL_GPIO_Init+0x1b8>
 8002412:	2303      	movs	r3, #3
 8002414:	e004      	b.n	8002420 <HAL_GPIO_Init+0x1b8>
 8002416:	2302      	movs	r3, #2
 8002418:	e002      	b.n	8002420 <HAL_GPIO_Init+0x1b8>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <HAL_GPIO_Init+0x1b8>
 800241e:	2300      	movs	r3, #0
 8002420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002422:	f002 0203 	and.w	r2, r2, #3
 8002426:	0092      	lsls	r2, r2, #2
 8002428:	4093      	lsls	r3, r2
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4313      	orrs	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002430:	493a      	ldr	r1, [pc, #232]	; (800251c <HAL_GPIO_Init+0x2b4>)
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	3302      	adds	r3, #2
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d006      	beq.n	8002458 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800244a:	4b3b      	ldr	r3, [pc, #236]	; (8002538 <HAL_GPIO_Init+0x2d0>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	493a      	ldr	r1, [pc, #232]	; (8002538 <HAL_GPIO_Init+0x2d0>)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]
 8002456:	e006      	b.n	8002466 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002458:	4b37      	ldr	r3, [pc, #220]	; (8002538 <HAL_GPIO_Init+0x2d0>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	43db      	mvns	r3, r3
 8002460:	4935      	ldr	r1, [pc, #212]	; (8002538 <HAL_GPIO_Init+0x2d0>)
 8002462:	4013      	ands	r3, r2
 8002464:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002472:	4b31      	ldr	r3, [pc, #196]	; (8002538 <HAL_GPIO_Init+0x2d0>)
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	4930      	ldr	r1, [pc, #192]	; (8002538 <HAL_GPIO_Init+0x2d0>)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	604b      	str	r3, [r1, #4]
 800247e:	e006      	b.n	800248e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002480:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <HAL_GPIO_Init+0x2d0>)
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	43db      	mvns	r3, r3
 8002488:	492b      	ldr	r1, [pc, #172]	; (8002538 <HAL_GPIO_Init+0x2d0>)
 800248a:	4013      	ands	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d006      	beq.n	80024a8 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800249a:	4b27      	ldr	r3, [pc, #156]	; (8002538 <HAL_GPIO_Init+0x2d0>)
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	4926      	ldr	r1, [pc, #152]	; (8002538 <HAL_GPIO_Init+0x2d0>)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
 80024a6:	e006      	b.n	80024b6 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024a8:	4b23      	ldr	r3, [pc, #140]	; (8002538 <HAL_GPIO_Init+0x2d0>)
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	4921      	ldr	r1, [pc, #132]	; (8002538 <HAL_GPIO_Init+0x2d0>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d006      	beq.n	80024d0 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024c2:	4b1d      	ldr	r3, [pc, #116]	; (8002538 <HAL_GPIO_Init+0x2d0>)
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	491c      	ldr	r1, [pc, #112]	; (8002538 <HAL_GPIO_Init+0x2d0>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60cb      	str	r3, [r1, #12]
 80024ce:	e006      	b.n	80024de <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <HAL_GPIO_Init+0x2d0>)
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	4917      	ldr	r1, [pc, #92]	; (8002538 <HAL_GPIO_Init+0x2d0>)
 80024da:	4013      	ands	r3, r2
 80024dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	3301      	adds	r3, #1
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	fa22 f303 	lsr.w	r3, r2, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f47f aec4 	bne.w	800227c <HAL_GPIO_Init+0x14>
  }
}
 80024f4:	bf00      	nop
 80024f6:	372c      	adds	r7, #44	; 0x2c
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	10210000 	.word	0x10210000
 8002504:	10110000 	.word	0x10110000
 8002508:	10120000 	.word	0x10120000
 800250c:	10310000 	.word	0x10310000
 8002510:	10320000 	.word	0x10320000
 8002514:	10220000 	.word	0x10220000
 8002518:	40021000 	.word	0x40021000
 800251c:	40010000 	.word	0x40010000
 8002520:	40010800 	.word	0x40010800
 8002524:	40010c00 	.word	0x40010c00
 8002528:	40011000 	.word	0x40011000
 800252c:	40011400 	.word	0x40011400
 8002530:	40011800 	.word	0x40011800
 8002534:	40011c00 	.word	0x40011c00
 8002538:	40010400 	.word	0x40010400

0800253c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e26c      	b.n	8002a28 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 8087 	beq.w	800266a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800255c:	4b92      	ldr	r3, [pc, #584]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 030c 	and.w	r3, r3, #12
 8002564:	2b04      	cmp	r3, #4
 8002566:	d00c      	beq.n	8002582 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002568:	4b8f      	ldr	r3, [pc, #572]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	2b08      	cmp	r3, #8
 8002572:	d112      	bne.n	800259a <HAL_RCC_OscConfig+0x5e>
 8002574:	4b8c      	ldr	r3, [pc, #560]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002580:	d10b      	bne.n	800259a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002582:	4b89      	ldr	r3, [pc, #548]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d06c      	beq.n	8002668 <HAL_RCC_OscConfig+0x12c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d168      	bne.n	8002668 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e246      	b.n	8002a28 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x76>
 80025a4:	4b80      	ldr	r3, [pc, #512]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a7f      	ldr	r2, [pc, #508]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	e02e      	b.n	8002610 <HAL_RCC_OscConfig+0xd4>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x98>
 80025ba:	4b7b      	ldr	r3, [pc, #492]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a7a      	ldr	r2, [pc, #488]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b78      	ldr	r3, [pc, #480]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a77      	ldr	r2, [pc, #476]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e01d      	b.n	8002610 <HAL_RCC_OscConfig+0xd4>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCC_OscConfig+0xbc>
 80025de:	4b72      	ldr	r3, [pc, #456]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a71      	ldr	r2, [pc, #452]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	4b6f      	ldr	r3, [pc, #444]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a6e      	ldr	r2, [pc, #440]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	e00b      	b.n	8002610 <HAL_RCC_OscConfig+0xd4>
 80025f8:	4b6b      	ldr	r3, [pc, #428]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a6a      	ldr	r2, [pc, #424]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80025fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	4b68      	ldr	r3, [pc, #416]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a67      	ldr	r2, [pc, #412]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 800260a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800260e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d013      	beq.n	8002640 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7fe fcfa 	bl	8001010 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002620:	f7fe fcf6 	bl	8001010 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b64      	cmp	r3, #100	; 0x64
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e1fa      	b.n	8002a28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002632:	4b5d      	ldr	r3, [pc, #372]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0xe4>
 800263e:	e014      	b.n	800266a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7fe fce6 	bl	8001010 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002648:	f7fe fce2 	bl	8001010 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b64      	cmp	r3, #100	; 0x64
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e1e6      	b.n	8002a28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265a:	4b53      	ldr	r3, [pc, #332]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x10c>
 8002666:	e000      	b.n	800266a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d063      	beq.n	800273e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002676:	4b4c      	ldr	r3, [pc, #304]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00b      	beq.n	800269a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002682:	4b49      	ldr	r3, [pc, #292]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	2b08      	cmp	r3, #8
 800268c:	d11c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x18c>
 800268e:	4b46      	ldr	r3, [pc, #280]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d116      	bne.n	80026c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269a:	4b43      	ldr	r3, [pc, #268]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_RCC_OscConfig+0x176>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d001      	beq.n	80026b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e1ba      	b.n	8002a28 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b2:	4b3d      	ldr	r3, [pc, #244]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4939      	ldr	r1, [pc, #228]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c6:	e03a      	b.n	800273e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d020      	beq.n	8002712 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d0:	4b36      	ldr	r3, [pc, #216]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d6:	f7fe fc9b 	bl	8001010 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026de:	f7fe fc97 	bl	8001010 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e19b      	b.n	8002a28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f0:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fc:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4927      	ldr	r1, [pc, #156]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 800270c:	4313      	orrs	r3, r2
 800270e:	600b      	str	r3, [r1, #0]
 8002710:	e015      	b.n	800273e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002712:	4b26      	ldr	r3, [pc, #152]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002718:	f7fe fc7a 	bl	8001010 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002720:	f7fe fc76 	bl	8001010 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e17a      	b.n	8002a28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002732:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d03a      	beq.n	80027c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d019      	beq.n	8002786 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002752:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <HAL_RCC_OscConfig+0x274>)
 8002754:	2201      	movs	r2, #1
 8002756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002758:	f7fe fc5a 	bl	8001010 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002760:	f7fe fc56 	bl	8001010 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e15a      	b.n	8002a28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002772:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <HAL_RCC_OscConfig+0x26c>)
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800277e:	2001      	movs	r0, #1
 8002780:	f000 fada 	bl	8002d38 <RCC_Delay>
 8002784:	e01c      	b.n	80027c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <HAL_RCC_OscConfig+0x274>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278c:	f7fe fc40 	bl	8001010 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002792:	e00f      	b.n	80027b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002794:	f7fe fc3c 	bl	8001010 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d908      	bls.n	80027b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e140      	b.n	8002a28 <HAL_RCC_OscConfig+0x4ec>
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000
 80027ac:	42420000 	.word	0x42420000
 80027b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b4:	4b9e      	ldr	r3, [pc, #632]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1e9      	bne.n	8002794 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80a6 	beq.w	800291a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ce:	2300      	movs	r3, #0
 80027d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d2:	4b97      	ldr	r3, [pc, #604]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10d      	bne.n	80027fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	4b94      	ldr	r3, [pc, #592]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	4a93      	ldr	r2, [pc, #588]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 80027e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e8:	61d3      	str	r3, [r2, #28]
 80027ea:	4b91      	ldr	r3, [pc, #580]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f6:	2301      	movs	r3, #1
 80027f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fa:	4b8e      	ldr	r3, [pc, #568]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002802:	2b00      	cmp	r3, #0
 8002804:	d118      	bne.n	8002838 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002806:	4b8b      	ldr	r3, [pc, #556]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a8a      	ldr	r2, [pc, #552]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 800280c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002812:	f7fe fbfd 	bl	8001010 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281a:	f7fe fbf9 	bl	8001010 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b64      	cmp	r3, #100	; 0x64
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e0fd      	b.n	8002a28 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282c:	4b81      	ldr	r3, [pc, #516]	; (8002a34 <HAL_RCC_OscConfig+0x4f8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x312>
 8002840:	4b7b      	ldr	r3, [pc, #492]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	4a7a      	ldr	r2, [pc, #488]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6213      	str	r3, [r2, #32]
 800284c:	e02d      	b.n	80028aa <HAL_RCC_OscConfig+0x36e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x334>
 8002856:	4b76      	ldr	r3, [pc, #472]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	4a75      	ldr	r2, [pc, #468]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	6213      	str	r3, [r2, #32]
 8002862:	4b73      	ldr	r3, [pc, #460]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	4a72      	ldr	r2, [pc, #456]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 8002868:	f023 0304 	bic.w	r3, r3, #4
 800286c:	6213      	str	r3, [r2, #32]
 800286e:	e01c      	b.n	80028aa <HAL_RCC_OscConfig+0x36e>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	2b05      	cmp	r3, #5
 8002876:	d10c      	bne.n	8002892 <HAL_RCC_OscConfig+0x356>
 8002878:	4b6d      	ldr	r3, [pc, #436]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	4a6c      	ldr	r2, [pc, #432]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 800287e:	f043 0304 	orr.w	r3, r3, #4
 8002882:	6213      	str	r3, [r2, #32]
 8002884:	4b6a      	ldr	r3, [pc, #424]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4a69      	ldr	r2, [pc, #420]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6213      	str	r3, [r2, #32]
 8002890:	e00b      	b.n	80028aa <HAL_RCC_OscConfig+0x36e>
 8002892:	4b67      	ldr	r3, [pc, #412]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	4a66      	ldr	r2, [pc, #408]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 8002898:	f023 0301 	bic.w	r3, r3, #1
 800289c:	6213      	str	r3, [r2, #32]
 800289e:	4b64      	ldr	r3, [pc, #400]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	4a63      	ldr	r2, [pc, #396]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 80028a4:	f023 0304 	bic.w	r3, r3, #4
 80028a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d015      	beq.n	80028de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b2:	f7fe fbad 	bl	8001010 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b8:	e00a      	b.n	80028d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ba:	f7fe fba9 	bl	8001010 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e0ab      	b.n	8002a28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d0:	4b57      	ldr	r3, [pc, #348]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0ee      	beq.n	80028ba <HAL_RCC_OscConfig+0x37e>
 80028dc:	e014      	b.n	8002908 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028de:	f7fe fb97 	bl	8001010 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e4:	e00a      	b.n	80028fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e6:	f7fe fb93 	bl	8001010 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e095      	b.n	8002a28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fc:	4b4c      	ldr	r3, [pc, #304]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1ee      	bne.n	80028e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002908:	7dfb      	ldrb	r3, [r7, #23]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d105      	bne.n	800291a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800290e:	4b48      	ldr	r3, [pc, #288]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	4a47      	ldr	r2, [pc, #284]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 8002914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002918:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 8081 	beq.w	8002a26 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002924:	4b42      	ldr	r3, [pc, #264]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 030c 	and.w	r3, r3, #12
 800292c:	2b08      	cmp	r3, #8
 800292e:	d061      	beq.n	80029f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d146      	bne.n	80029c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002938:	4b3f      	ldr	r3, [pc, #252]	; (8002a38 <HAL_RCC_OscConfig+0x4fc>)
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293e:	f7fe fb67 	bl	8001010 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002946:	f7fe fb63 	bl	8001010 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e067      	b.n	8002a28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002958:	4b35      	ldr	r3, [pc, #212]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f0      	bne.n	8002946 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296c:	d108      	bne.n	8002980 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800296e:	4b30      	ldr	r3, [pc, #192]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	492d      	ldr	r1, [pc, #180]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 800297c:	4313      	orrs	r3, r2
 800297e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002980:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a19      	ldr	r1, [r3, #32]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	430b      	orrs	r3, r1
 8002992:	4927      	ldr	r1, [pc, #156]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002998:	4b27      	ldr	r3, [pc, #156]	; (8002a38 <HAL_RCC_OscConfig+0x4fc>)
 800299a:	2201      	movs	r2, #1
 800299c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299e:	f7fe fb37 	bl	8001010 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a6:	f7fe fb33 	bl	8001010 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e037      	b.n	8002a28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029b8:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x46a>
 80029c4:	e02f      	b.n	8002a26 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c6:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <HAL_RCC_OscConfig+0x4fc>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7fe fb20 	bl	8001010 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d4:	f7fe fb1c 	bl	8001010 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e020      	b.n	8002a28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x498>
 80029f2:	e018      	b.n	8002a26 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e013      	b.n	8002a28 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_RCC_OscConfig+0x4f4>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d106      	bne.n	8002a22 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d001      	beq.n	8002a26 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40007000 	.word	0x40007000
 8002a38:	42420060 	.word	0x42420060

08002a3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0d0      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a50:	4b6a      	ldr	r3, [pc, #424]	; (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d910      	bls.n	8002a80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b67      	ldr	r3, [pc, #412]	; (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f023 0207 	bic.w	r2, r3, #7
 8002a66:	4965      	ldr	r1, [pc, #404]	; (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b63      	ldr	r3, [pc, #396]	; (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0b8      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d020      	beq.n	8002ace <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a98:	4b59      	ldr	r3, [pc, #356]	; (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4a58      	ldr	r2, [pc, #352]	; (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002aa2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab0:	4b53      	ldr	r3, [pc, #332]	; (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4a52      	ldr	r2, [pc, #328]	; (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002aba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002abc:	4b50      	ldr	r3, [pc, #320]	; (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	494d      	ldr	r1, [pc, #308]	; (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d040      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d107      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	4b47      	ldr	r3, [pc, #284]	; (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d115      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e07f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d107      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afa:	4b41      	ldr	r3, [pc, #260]	; (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e073      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0a:	4b3d      	ldr	r3, [pc, #244]	; (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e06b      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b1a:	4b39      	ldr	r3, [pc, #228]	; (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f023 0203 	bic.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4936      	ldr	r1, [pc, #216]	; (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b2c:	f7fe fa70 	bl	8001010 <HAL_GetTick>
 8002b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b34:	f7fe fa6c 	bl	8001010 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e053      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 020c 	and.w	r2, r3, #12
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d1eb      	bne.n	8002b34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b27      	ldr	r3, [pc, #156]	; (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d210      	bcs.n	8002b8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 0207 	bic.w	r2, r3, #7
 8002b72:	4922      	ldr	r1, [pc, #136]	; (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b20      	ldr	r3, [pc, #128]	; (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e032      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b98:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4916      	ldr	r1, [pc, #88]	; (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bb6:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	490e      	ldr	r1, [pc, #56]	; (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bca:	f000 f821 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 8002bce:	4601      	mov	r1, r0
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	4a0a      	ldr	r2, [pc, #40]	; (8002c04 <HAL_RCC_ClockConfig+0x1c8>)
 8002bdc:	5cd3      	ldrb	r3, [r2, r3]
 8002bde:	fa21 f303 	lsr.w	r3, r1, r3
 8002be2:	4a09      	ldr	r2, [pc, #36]	; (8002c08 <HAL_RCC_ClockConfig+0x1cc>)
 8002be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <HAL_RCC_ClockConfig+0x1d0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe f9ce 	bl	8000f8c <HAL_InitTick>

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40022000 	.word	0x40022000
 8002c00:	40021000 	.word	0x40021000
 8002c04:	08003cd0 	.word	0x08003cd0
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	20000004 	.word	0x20000004

08002c10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c10:	b490      	push	{r4, r7}
 8002c12:	b08a      	sub	sp, #40	; 0x28
 8002c14:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c16:	4b2a      	ldr	r3, [pc, #168]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c18:	1d3c      	adds	r4, r7, #4
 8002c1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c20:	4b28      	ldr	r3, [pc, #160]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c3a:	4b23      	ldr	r3, [pc, #140]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d002      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x40>
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d003      	beq.n	8002c56 <HAL_RCC_GetSysClockFreq+0x46>
 8002c4e:	e02d      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c50:	4b1e      	ldr	r3, [pc, #120]	; (8002ccc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c52:	623b      	str	r3, [r7, #32]
      break;
 8002c54:	e02d      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	0c9b      	lsrs	r3, r3, #18
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c62:	4413      	add	r3, r2
 8002c64:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c68:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d013      	beq.n	8002c9c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c74:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	0c5b      	lsrs	r3, r3, #17
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c82:	4413      	add	r3, r2
 8002c84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	4a0f      	ldr	r2, [pc, #60]	; (8002ccc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c8e:	fb02 f203 	mul.w	r2, r2, r3
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9a:	e004      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	4a0c      	ldr	r2, [pc, #48]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ca0:	fb02 f303 	mul.w	r3, r2, r3
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	623b      	str	r3, [r7, #32]
      break;
 8002caa:	e002      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cac:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cae:	623b      	str	r3, [r7, #32]
      break;
 8002cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3728      	adds	r7, #40	; 0x28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc90      	pop	{r4, r7}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	08003cbc 	.word	0x08003cbc
 8002cc4:	08003ccc 	.word	0x08003ccc
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	007a1200 	.word	0x007a1200
 8002cd0:	003d0900 	.word	0x003d0900

08002cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cd8:	4b02      	ldr	r3, [pc, #8]	; (8002ce4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cda:	681b      	ldr	r3, [r3, #0]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr
 8002ce4:	20000000 	.word	0x20000000

08002ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cec:	f7ff fff2 	bl	8002cd4 <HAL_RCC_GetHCLKFreq>
 8002cf0:	4601      	mov	r1, r0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4a03      	ldr	r2, [pc, #12]	; (8002d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cfe:	5cd3      	ldrb	r3, [r2, r3]
 8002d00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	08003ce0 	.word	0x08003ce0

08002d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d14:	f7ff ffde 	bl	8002cd4 <HAL_RCC_GetHCLKFreq>
 8002d18:	4601      	mov	r1, r0
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	0adb      	lsrs	r3, r3, #11
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	4a03      	ldr	r2, [pc, #12]	; (8002d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d26:	5cd3      	ldrb	r3, [r2, r3]
 8002d28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021000 	.word	0x40021000
 8002d34:	08003ce0 	.word	0x08003ce0

08002d38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d40:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <RCC_Delay+0x34>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <RCC_Delay+0x38>)
 8002d46:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4a:	0a5b      	lsrs	r3, r3, #9
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	fb02 f303 	mul.w	r3, r2, r3
 8002d52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d54:	bf00      	nop
  }
  while (Delay --);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1e5a      	subs	r2, r3, #1
 8002d5a:	60fa      	str	r2, [r7, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1f9      	bne.n	8002d54 <RCC_Delay+0x1c>
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	20000000 	.word	0x20000000
 8002d70:	10624dd3 	.word	0x10624dd3

08002d74 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d07d      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002d90:	2300      	movs	r3, #0
 8002d92:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d94:	4b4f      	ldr	r3, [pc, #316]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10d      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da0:	4b4c      	ldr	r3, [pc, #304]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	4a4b      	ldr	r2, [pc, #300]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002daa:	61d3      	str	r3, [r2, #28]
 8002dac:	4b49      	ldr	r3, [pc, #292]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db8:	2301      	movs	r3, #1
 8002dba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbc:	4b46      	ldr	r3, [pc, #280]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d118      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dc8:	4b43      	ldr	r3, [pc, #268]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a42      	ldr	r2, [pc, #264]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd4:	f7fe f91c 	bl	8001010 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dda:	e008      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ddc:	f7fe f918 	bl	8001010 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	; 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e06d      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dee:	4b3a      	ldr	r3, [pc, #232]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dfa:	4b36      	ldr	r3, [pc, #216]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e02:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d02e      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d027      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e18:	4b2e      	ldr	r3, [pc, #184]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e20:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e22:	4b2e      	ldr	r3, [pc, #184]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e28:	4b2c      	ldr	r3, [pc, #176]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e2e:	4a29      	ldr	r2, [pc, #164]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d014      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3e:	f7fe f8e7 	bl	8001010 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e44:	e00a      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e46:	f7fe f8e3 	bl	8001010 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e036      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ee      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e68:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	4917      	ldr	r1, [pc, #92]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d105      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e80:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	4a13      	ldr	r2, [pc, #76]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e98:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	490b      	ldr	r1, [pc, #44]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d008      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002eb6:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	4904      	ldr	r1, [pc, #16]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40007000 	.word	0x40007000
 8002edc:	42420440 	.word	0x42420440

08002ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e01d      	b.n	8002f2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fd fe86 	bl	8000c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f000 f9fa 	bl	8003318 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e01d      	b.n	8002f84 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d106      	bne.n	8002f62 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f815 	bl	8002f8c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2202      	movs	r2, #2
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3304      	adds	r3, #4
 8002f72:	4619      	mov	r1, r3
 8002f74:	4610      	mov	r0, r2
 8002f76:	f000 f9cf 	bl	8003318 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr
	...

08002fa0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b0c      	cmp	r3, #12
 8002fae:	d841      	bhi.n	8003034 <HAL_TIM_IC_Start_IT+0x94>
 8002fb0:	a201      	add	r2, pc, #4	; (adr r2, 8002fb8 <HAL_TIM_IC_Start_IT+0x18>)
 8002fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb6:	bf00      	nop
 8002fb8:	08002fed 	.word	0x08002fed
 8002fbc:	08003035 	.word	0x08003035
 8002fc0:	08003035 	.word	0x08003035
 8002fc4:	08003035 	.word	0x08003035
 8002fc8:	08002fff 	.word	0x08002fff
 8002fcc:	08003035 	.word	0x08003035
 8002fd0:	08003035 	.word	0x08003035
 8002fd4:	08003035 	.word	0x08003035
 8002fd8:	08003011 	.word	0x08003011
 8002fdc:	08003035 	.word	0x08003035
 8002fe0:	08003035 	.word	0x08003035
 8002fe4:	08003035 	.word	0x08003035
 8002fe8:	08003023 	.word	0x08003023
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0202 	orr.w	r2, r2, #2
 8002ffa:	60da      	str	r2, [r3, #12]
      break;
 8002ffc:	e01b      	b.n	8003036 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0204 	orr.w	r2, r2, #4
 800300c:	60da      	str	r2, [r3, #12]
      break;
 800300e:	e012      	b.n	8003036 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0208 	orr.w	r2, r2, #8
 800301e:	60da      	str	r2, [r3, #12]
      break;
 8003020:	e009      	b.n	8003036 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0210 	orr.w	r2, r2, #16
 8003030:	60da      	str	r2, [r3, #12]
      break;
 8003032:	e000      	b.n	8003036 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8003034:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2201      	movs	r2, #1
 800303c:	6839      	ldr	r1, [r7, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fb93 	bl	800376a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b06      	cmp	r3, #6
 8003054:	d007      	beq.n	8003066 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0201 	orr.w	r2, r2, #1
 8003064:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003082:	2b01      	cmp	r3, #1
 8003084:	d101      	bne.n	800308a <HAL_TIM_IC_ConfigChannel+0x1a>
 8003086:	2302      	movs	r3, #2
 8003088:	e08a      	b.n	80031a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2202      	movs	r2, #2
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d11b      	bne.n	80030d8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	6819      	ldr	r1, [r3, #0]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f000 f9ac 	bl	800340c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699a      	ldr	r2, [r3, #24]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 020c 	bic.w	r2, r2, #12
 80030c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6999      	ldr	r1, [r3, #24]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	619a      	str	r2, [r3, #24]
 80030d6:	e05a      	b.n	800318e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d11c      	bne.n	8003118 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	6819      	ldr	r1, [r3, #0]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f000 fa21 	bl	8003534 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699a      	ldr	r2, [r3, #24]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003100:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6999      	ldr	r1, [r3, #24]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	021a      	lsls	r2, r3, #8
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	619a      	str	r2, [r3, #24]
 8003116:	e03a      	b.n	800318e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b08      	cmp	r3, #8
 800311c:	d11b      	bne.n	8003156 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	6819      	ldr	r1, [r3, #0]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f000 fa6c 	bl	800360a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	69da      	ldr	r2, [r3, #28]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 020c 	bic.w	r2, r2, #12
 8003140:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69d9      	ldr	r1, [r3, #28]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	61da      	str	r2, [r3, #28]
 8003154:	e01b      	b.n	800318e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	6819      	ldr	r1, [r3, #0]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f000 fa8b 	bl	8003680 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69da      	ldr	r2, [r3, #28]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003178:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69d9      	ldr	r1, [r3, #28]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	021a      	lsls	r2, r3, #8
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_TIM_ConfigClockSource+0x18>
 80031bc:	2302      	movs	r3, #2
 80031be:	e0a6      	b.n	800330e <HAL_TIM_ConfigClockSource+0x166>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b40      	cmp	r3, #64	; 0x40
 80031f6:	d067      	beq.n	80032c8 <HAL_TIM_ConfigClockSource+0x120>
 80031f8:	2b40      	cmp	r3, #64	; 0x40
 80031fa:	d80b      	bhi.n	8003214 <HAL_TIM_ConfigClockSource+0x6c>
 80031fc:	2b10      	cmp	r3, #16
 80031fe:	d073      	beq.n	80032e8 <HAL_TIM_ConfigClockSource+0x140>
 8003200:	2b10      	cmp	r3, #16
 8003202:	d802      	bhi.n	800320a <HAL_TIM_ConfigClockSource+0x62>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d06f      	beq.n	80032e8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003208:	e078      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800320a:	2b20      	cmp	r3, #32
 800320c:	d06c      	beq.n	80032e8 <HAL_TIM_ConfigClockSource+0x140>
 800320e:	2b30      	cmp	r3, #48	; 0x30
 8003210:	d06a      	beq.n	80032e8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003212:	e073      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003214:	2b70      	cmp	r3, #112	; 0x70
 8003216:	d00d      	beq.n	8003234 <HAL_TIM_ConfigClockSource+0x8c>
 8003218:	2b70      	cmp	r3, #112	; 0x70
 800321a:	d804      	bhi.n	8003226 <HAL_TIM_ConfigClockSource+0x7e>
 800321c:	2b50      	cmp	r3, #80	; 0x50
 800321e:	d033      	beq.n	8003288 <HAL_TIM_ConfigClockSource+0xe0>
 8003220:	2b60      	cmp	r3, #96	; 0x60
 8003222:	d041      	beq.n	80032a8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003224:	e06a      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800322a:	d066      	beq.n	80032fa <HAL_TIM_ConfigClockSource+0x152>
 800322c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003230:	d017      	beq.n	8003262 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003232:	e063      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	6899      	ldr	r1, [r3, #8]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f000 fa72 	bl	800372c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003256:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	609a      	str	r2, [r3, #8]
      break;
 8003260:	e04c      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6899      	ldr	r1, [r3, #8]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f000 fa5b 	bl	800372c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003284:	609a      	str	r2, [r3, #8]
      break;
 8003286:	e039      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	461a      	mov	r2, r3
 8003296:	f000 f91f 	bl	80034d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2150      	movs	r1, #80	; 0x50
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fa29 	bl	80036f8 <TIM_ITRx_SetConfig>
      break;
 80032a6:	e029      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	461a      	mov	r2, r3
 80032b6:	f000 f979 	bl	80035ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2160      	movs	r1, #96	; 0x60
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 fa19 	bl	80036f8 <TIM_ITRx_SetConfig>
      break;
 80032c6:	e019      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6859      	ldr	r1, [r3, #4]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	461a      	mov	r2, r3
 80032d6:	f000 f8ff 	bl	80034d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2140      	movs	r1, #64	; 0x40
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fa09 	bl	80036f8 <TIM_ITRx_SetConfig>
      break;
 80032e6:	e009      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4619      	mov	r1, r3
 80032f2:	4610      	mov	r0, r2
 80032f4:	f000 fa00 	bl	80036f8 <TIM_ITRx_SetConfig>
      break;
 80032f8:	e000      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80032fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a33      	ldr	r2, [pc, #204]	; (80033f8 <TIM_Base_SetConfig+0xe0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d013      	beq.n	8003358 <TIM_Base_SetConfig+0x40>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a32      	ldr	r2, [pc, #200]	; (80033fc <TIM_Base_SetConfig+0xe4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00f      	beq.n	8003358 <TIM_Base_SetConfig+0x40>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800333e:	d00b      	beq.n	8003358 <TIM_Base_SetConfig+0x40>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a2f      	ldr	r2, [pc, #188]	; (8003400 <TIM_Base_SetConfig+0xe8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d007      	beq.n	8003358 <TIM_Base_SetConfig+0x40>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a2e      	ldr	r2, [pc, #184]	; (8003404 <TIM_Base_SetConfig+0xec>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d003      	beq.n	8003358 <TIM_Base_SetConfig+0x40>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a2d      	ldr	r2, [pc, #180]	; (8003408 <TIM_Base_SetConfig+0xf0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d108      	bne.n	800336a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800335e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a22      	ldr	r2, [pc, #136]	; (80033f8 <TIM_Base_SetConfig+0xe0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d013      	beq.n	800339a <TIM_Base_SetConfig+0x82>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a21      	ldr	r2, [pc, #132]	; (80033fc <TIM_Base_SetConfig+0xe4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00f      	beq.n	800339a <TIM_Base_SetConfig+0x82>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003380:	d00b      	beq.n	800339a <TIM_Base_SetConfig+0x82>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a1e      	ldr	r2, [pc, #120]	; (8003400 <TIM_Base_SetConfig+0xe8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d007      	beq.n	800339a <TIM_Base_SetConfig+0x82>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a1d      	ldr	r2, [pc, #116]	; (8003404 <TIM_Base_SetConfig+0xec>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d003      	beq.n	800339a <TIM_Base_SetConfig+0x82>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a1c      	ldr	r2, [pc, #112]	; (8003408 <TIM_Base_SetConfig+0xf0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d108      	bne.n	80033ac <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a09      	ldr	r2, [pc, #36]	; (80033f8 <TIM_Base_SetConfig+0xe0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d003      	beq.n	80033e0 <TIM_Base_SetConfig+0xc8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a08      	ldr	r2, [pc, #32]	; (80033fc <TIM_Base_SetConfig+0xe4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d103      	bne.n	80033e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	615a      	str	r2, [r3, #20]
}
 80033ee:	bf00      	nop
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	40012c00 	.word	0x40012c00
 80033fc:	40013400 	.word	0x40013400
 8003400:	40000400 	.word	0x40000400
 8003404:	40000800 	.word	0x40000800
 8003408:	40000c00 	.word	0x40000c00

0800340c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	f023 0201 	bic.w	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4a23      	ldr	r2, [pc, #140]	; (80034c4 <TIM_TI1_SetConfig+0xb8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <TIM_TI1_SetConfig+0x56>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4a22      	ldr	r2, [pc, #136]	; (80034c8 <TIM_TI1_SetConfig+0xbc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00f      	beq.n	8003462 <TIM_TI1_SetConfig+0x56>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003448:	d00b      	beq.n	8003462 <TIM_TI1_SetConfig+0x56>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4a1f      	ldr	r2, [pc, #124]	; (80034cc <TIM_TI1_SetConfig+0xc0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d007      	beq.n	8003462 <TIM_TI1_SetConfig+0x56>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4a1e      	ldr	r2, [pc, #120]	; (80034d0 <TIM_TI1_SetConfig+0xc4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d003      	beq.n	8003462 <TIM_TI1_SetConfig+0x56>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4a1d      	ldr	r2, [pc, #116]	; (80034d4 <TIM_TI1_SetConfig+0xc8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d101      	bne.n	8003466 <TIM_TI1_SetConfig+0x5a>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <TIM_TI1_SetConfig+0x5c>
 8003466:	2300      	movs	r3, #0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f023 0303 	bic.w	r3, r3, #3
 8003472:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	e003      	b.n	8003486 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800348c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	b2db      	uxtb	r3, r3
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4313      	orrs	r3, r2
 8003498:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f023 030a 	bic.w	r3, r3, #10
 80034a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	f003 030a 	and.w	r3, r3, #10
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	621a      	str	r2, [r3, #32]
}
 80034ba:	bf00      	nop
 80034bc:	371c      	adds	r7, #28
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr
 80034c4:	40012c00 	.word	0x40012c00
 80034c8:	40013400 	.word	0x40013400
 80034cc:	40000400 	.word	0x40000400
 80034d0:	40000800 	.word	0x40000800
 80034d4:	40000c00 	.word	0x40000c00

080034d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	f023 0201 	bic.w	r2, r3, #1
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f023 030a 	bic.w	r3, r3, #10
 8003514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	621a      	str	r2, [r3, #32]
}
 800352a:	bf00      	nop
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
 8003540:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	f023 0210 	bic.w	r2, r3, #16
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003560:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003572:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	031b      	lsls	r3, r3, #12
 8003578:	b29b      	uxth	r3, r3
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003586:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	621a      	str	r2, [r3, #32]
}
 80035a2:	bf00      	nop
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr

080035ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f023 0210 	bic.w	r2, r3, #16
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	031b      	lsls	r3, r3, #12
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	621a      	str	r2, [r3, #32]
}
 8003600:	bf00      	nop
 8003602:	371c      	adds	r7, #28
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800360a:	b480      	push	{r7}
 800360c:	b087      	sub	sp, #28
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
 8003616:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f023 0303 	bic.w	r3, r3, #3
 8003636:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003646:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	b2db      	uxtb	r3, r3
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800365a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	021b      	lsls	r3, r3, #8
 8003660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	021b      	lsls	r3, r3, #8
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	031b      	lsls	r3, r3, #12
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	031b      	lsls	r3, r3, #12
 80036d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	621a      	str	r2, [r3, #32]
}
 80036ee:	bf00      	nop
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr

080036f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	f043 0307 	orr.w	r3, r3, #7
 800371a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	609a      	str	r2, [r3, #8]
}
 8003722:	bf00      	nop
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003746:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	021a      	lsls	r2, r3, #8
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	431a      	orrs	r2, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4313      	orrs	r3, r2
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	609a      	str	r2, [r3, #8]
}
 8003760:	bf00      	nop
 8003762:	371c      	adds	r7, #28
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr

0800376a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800376a:	b480      	push	{r7}
 800376c:	b087      	sub	sp, #28
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	2201      	movs	r2, #1
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a1a      	ldr	r2, [r3, #32]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	43db      	mvns	r3, r3
 800378c:	401a      	ands	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a1a      	ldr	r2, [r3, #32]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	fa01 f303 	lsl.w	r3, r1, r3
 80037a2:	431a      	orrs	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	621a      	str	r2, [r3, #32]
}
 80037a8:	bf00      	nop
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr

080037b2 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b085      	sub	sp, #20
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e032      	b.n	8003830 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003802:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	4313      	orrs	r3, r2
 800380c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr

0800383a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e03f      	b.n	80038cc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d106      	bne.n	8003866 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7fd fa7f 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2224      	movs	r2, #36	; 0x24
 800386a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800387c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f828 	bl	80038d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003892:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038a2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800390e:	f023 030c 	bic.w	r3, r3, #12
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	68f9      	ldr	r1, [r7, #12]
 8003918:	430b      	orrs	r3, r1
 800391a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a52      	ldr	r2, [pc, #328]	; (8003a80 <UART_SetConfig+0x1ac>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d14e      	bne.n	80039da <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800393c:	f7ff f9e8 	bl	8002d10 <HAL_RCC_GetPCLK2Freq>
 8003940:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	009a      	lsls	r2, r3, #2
 800394c:	441a      	add	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	fbb2 f3f3 	udiv	r3, r2, r3
 8003958:	4a4a      	ldr	r2, [pc, #296]	; (8003a84 <UART_SetConfig+0x1b0>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	0119      	lsls	r1, r3, #4
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	009a      	lsls	r2, r3, #2
 800396c:	441a      	add	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	fbb2 f2f3 	udiv	r2, r2, r3
 8003978:	4b42      	ldr	r3, [pc, #264]	; (8003a84 <UART_SetConfig+0x1b0>)
 800397a:	fba3 0302 	umull	r0, r3, r3, r2
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	2064      	movs	r0, #100	; 0x64
 8003982:	fb00 f303 	mul.w	r3, r0, r3
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	3332      	adds	r3, #50	; 0x32
 800398c:	4a3d      	ldr	r2, [pc, #244]	; (8003a84 <UART_SetConfig+0x1b0>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003998:	4419      	add	r1, r3
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	009a      	lsls	r2, r3, #2
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80039b0:	4b34      	ldr	r3, [pc, #208]	; (8003a84 <UART_SetConfig+0x1b0>)
 80039b2:	fba3 0302 	umull	r0, r3, r3, r2
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	2064      	movs	r0, #100	; 0x64
 80039ba:	fb00 f303 	mul.w	r3, r0, r3
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	3332      	adds	r3, #50	; 0x32
 80039c4:	4a2f      	ldr	r2, [pc, #188]	; (8003a84 <UART_SetConfig+0x1b0>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	f003 020f 	and.w	r2, r3, #15
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	440a      	add	r2, r1
 80039d6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80039d8:	e04d      	b.n	8003a76 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80039da:	f7ff f985 	bl	8002ce8 <HAL_RCC_GetPCLK1Freq>
 80039de:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	009a      	lsls	r2, r3, #2
 80039ea:	441a      	add	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f6:	4a23      	ldr	r2, [pc, #140]	; (8003a84 <UART_SetConfig+0x1b0>)
 80039f8:	fba2 2303 	umull	r2, r3, r2, r3
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	0119      	lsls	r1, r3, #4
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	009a      	lsls	r2, r3, #2
 8003a0a:	441a      	add	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a16:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <UART_SetConfig+0x1b0>)
 8003a18:	fba3 0302 	umull	r0, r3, r3, r2
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	2064      	movs	r0, #100	; 0x64
 8003a20:	fb00 f303 	mul.w	r3, r0, r3
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	3332      	adds	r3, #50	; 0x32
 8003a2a:	4a16      	ldr	r2, [pc, #88]	; (8003a84 <UART_SetConfig+0x1b0>)
 8003a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a36:	4419      	add	r1, r3
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	009a      	lsls	r2, r3, #2
 8003a42:	441a      	add	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a4e:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <UART_SetConfig+0x1b0>)
 8003a50:	fba3 0302 	umull	r0, r3, r3, r2
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	2064      	movs	r0, #100	; 0x64
 8003a58:	fb00 f303 	mul.w	r3, r0, r3
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	3332      	adds	r3, #50	; 0x32
 8003a62:	4a08      	ldr	r2, [pc, #32]	; (8003a84 <UART_SetConfig+0x1b0>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	f003 020f 	and.w	r2, r3, #15
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	440a      	add	r2, r1
 8003a74:	609a      	str	r2, [r3, #8]
}
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40013800 	.word	0x40013800
 8003a84:	51eb851f 	.word	0x51eb851f

08003a88 <_Znwj>:
 8003a88:	b510      	push	{r4, lr}
 8003a8a:	2800      	cmp	r0, #0
 8003a8c:	bf14      	ite	ne
 8003a8e:	4604      	movne	r4, r0
 8003a90:	2401      	moveq	r4, #1
 8003a92:	4620      	mov	r0, r4
 8003a94:	f000 f844 	bl	8003b20 <malloc>
 8003a98:	b930      	cbnz	r0, 8003aa8 <_Znwj+0x20>
 8003a9a:	f000 f807 	bl	8003aac <_ZSt15get_new_handlerv>
 8003a9e:	b908      	cbnz	r0, 8003aa4 <_Znwj+0x1c>
 8003aa0:	f000 f80c 	bl	8003abc <abort>
 8003aa4:	4780      	blx	r0
 8003aa6:	e7f4      	b.n	8003a92 <_Znwj+0xa>
 8003aa8:	bd10      	pop	{r4, pc}
	...

08003aac <_ZSt15get_new_handlerv>:
 8003aac:	4b02      	ldr	r3, [pc, #8]	; (8003ab8 <_ZSt15get_new_handlerv+0xc>)
 8003aae:	6818      	ldr	r0, [r3, #0]
 8003ab0:	f3bf 8f5b 	dmb	ish
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	200000a0 	.word	0x200000a0

08003abc <abort>:
 8003abc:	b508      	push	{r3, lr}
 8003abe:	2006      	movs	r0, #6
 8003ac0:	f000 f8d0 	bl	8003c64 <raise>
 8003ac4:	2001      	movs	r0, #1
 8003ac6:	f7fc ff78 	bl	80009ba <_exit>
	...

08003acc <__errno>:
 8003acc:	4b01      	ldr	r3, [pc, #4]	; (8003ad4 <__errno+0x8>)
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	2000000c 	.word	0x2000000c

08003ad8 <__libc_init_array>:
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	2500      	movs	r5, #0
 8003adc:	4e0c      	ldr	r6, [pc, #48]	; (8003b10 <__libc_init_array+0x38>)
 8003ade:	4c0d      	ldr	r4, [pc, #52]	; (8003b14 <__libc_init_array+0x3c>)
 8003ae0:	1ba4      	subs	r4, r4, r6
 8003ae2:	10a4      	asrs	r4, r4, #2
 8003ae4:	42a5      	cmp	r5, r4
 8003ae6:	d109      	bne.n	8003afc <__libc_init_array+0x24>
 8003ae8:	f000 f8da 	bl	8003ca0 <_init>
 8003aec:	2500      	movs	r5, #0
 8003aee:	4e0a      	ldr	r6, [pc, #40]	; (8003b18 <__libc_init_array+0x40>)
 8003af0:	4c0a      	ldr	r4, [pc, #40]	; (8003b1c <__libc_init_array+0x44>)
 8003af2:	1ba4      	subs	r4, r4, r6
 8003af4:	10a4      	asrs	r4, r4, #2
 8003af6:	42a5      	cmp	r5, r4
 8003af8:	d105      	bne.n	8003b06 <__libc_init_array+0x2e>
 8003afa:	bd70      	pop	{r4, r5, r6, pc}
 8003afc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b00:	4798      	blx	r3
 8003b02:	3501      	adds	r5, #1
 8003b04:	e7ee      	b.n	8003ae4 <__libc_init_array+0xc>
 8003b06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b0a:	4798      	blx	r3
 8003b0c:	3501      	adds	r5, #1
 8003b0e:	e7f2      	b.n	8003af6 <__libc_init_array+0x1e>
 8003b10:	08003ce8 	.word	0x08003ce8
 8003b14:	08003ce8 	.word	0x08003ce8
 8003b18:	08003ce8 	.word	0x08003ce8
 8003b1c:	08003cec 	.word	0x08003cec

08003b20 <malloc>:
 8003b20:	4b02      	ldr	r3, [pc, #8]	; (8003b2c <malloc+0xc>)
 8003b22:	4601      	mov	r1, r0
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	f000 b80b 	b.w	8003b40 <_malloc_r>
 8003b2a:	bf00      	nop
 8003b2c:	2000000c 	.word	0x2000000c

08003b30 <memset>:
 8003b30:	4603      	mov	r3, r0
 8003b32:	4402      	add	r2, r0
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d100      	bne.n	8003b3a <memset+0xa>
 8003b38:	4770      	bx	lr
 8003b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b3e:	e7f9      	b.n	8003b34 <memset+0x4>

08003b40 <_malloc_r>:
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	1ccd      	adds	r5, r1, #3
 8003b44:	f025 0503 	bic.w	r5, r5, #3
 8003b48:	3508      	adds	r5, #8
 8003b4a:	2d0c      	cmp	r5, #12
 8003b4c:	bf38      	it	cc
 8003b4e:	250c      	movcc	r5, #12
 8003b50:	2d00      	cmp	r5, #0
 8003b52:	4606      	mov	r6, r0
 8003b54:	db01      	blt.n	8003b5a <_malloc_r+0x1a>
 8003b56:	42a9      	cmp	r1, r5
 8003b58:	d903      	bls.n	8003b62 <_malloc_r+0x22>
 8003b5a:	230c      	movs	r3, #12
 8003b5c:	6033      	str	r3, [r6, #0]
 8003b5e:	2000      	movs	r0, #0
 8003b60:	bd70      	pop	{r4, r5, r6, pc}
 8003b62:	f000 f89b 	bl	8003c9c <__malloc_lock>
 8003b66:	4a21      	ldr	r2, [pc, #132]	; (8003bec <_malloc_r+0xac>)
 8003b68:	6814      	ldr	r4, [r2, #0]
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	b991      	cbnz	r1, 8003b94 <_malloc_r+0x54>
 8003b6e:	4c20      	ldr	r4, [pc, #128]	; (8003bf0 <_malloc_r+0xb0>)
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	b91b      	cbnz	r3, 8003b7c <_malloc_r+0x3c>
 8003b74:	4630      	mov	r0, r6
 8003b76:	f000 f83d 	bl	8003bf4 <_sbrk_r>
 8003b7a:	6020      	str	r0, [r4, #0]
 8003b7c:	4629      	mov	r1, r5
 8003b7e:	4630      	mov	r0, r6
 8003b80:	f000 f838 	bl	8003bf4 <_sbrk_r>
 8003b84:	1c43      	adds	r3, r0, #1
 8003b86:	d124      	bne.n	8003bd2 <_malloc_r+0x92>
 8003b88:	230c      	movs	r3, #12
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	6033      	str	r3, [r6, #0]
 8003b8e:	f000 f886 	bl	8003c9e <__malloc_unlock>
 8003b92:	e7e4      	b.n	8003b5e <_malloc_r+0x1e>
 8003b94:	680b      	ldr	r3, [r1, #0]
 8003b96:	1b5b      	subs	r3, r3, r5
 8003b98:	d418      	bmi.n	8003bcc <_malloc_r+0x8c>
 8003b9a:	2b0b      	cmp	r3, #11
 8003b9c:	d90f      	bls.n	8003bbe <_malloc_r+0x7e>
 8003b9e:	600b      	str	r3, [r1, #0]
 8003ba0:	18cc      	adds	r4, r1, r3
 8003ba2:	50cd      	str	r5, [r1, r3]
 8003ba4:	4630      	mov	r0, r6
 8003ba6:	f000 f87a 	bl	8003c9e <__malloc_unlock>
 8003baa:	f104 000b 	add.w	r0, r4, #11
 8003bae:	1d23      	adds	r3, r4, #4
 8003bb0:	f020 0007 	bic.w	r0, r0, #7
 8003bb4:	1ac3      	subs	r3, r0, r3
 8003bb6:	d0d3      	beq.n	8003b60 <_malloc_r+0x20>
 8003bb8:	425a      	negs	r2, r3
 8003bba:	50e2      	str	r2, [r4, r3]
 8003bbc:	e7d0      	b.n	8003b60 <_malloc_r+0x20>
 8003bbe:	684b      	ldr	r3, [r1, #4]
 8003bc0:	428c      	cmp	r4, r1
 8003bc2:	bf16      	itet	ne
 8003bc4:	6063      	strne	r3, [r4, #4]
 8003bc6:	6013      	streq	r3, [r2, #0]
 8003bc8:	460c      	movne	r4, r1
 8003bca:	e7eb      	b.n	8003ba4 <_malloc_r+0x64>
 8003bcc:	460c      	mov	r4, r1
 8003bce:	6849      	ldr	r1, [r1, #4]
 8003bd0:	e7cc      	b.n	8003b6c <_malloc_r+0x2c>
 8003bd2:	1cc4      	adds	r4, r0, #3
 8003bd4:	f024 0403 	bic.w	r4, r4, #3
 8003bd8:	42a0      	cmp	r0, r4
 8003bda:	d005      	beq.n	8003be8 <_malloc_r+0xa8>
 8003bdc:	1a21      	subs	r1, r4, r0
 8003bde:	4630      	mov	r0, r6
 8003be0:	f000 f808 	bl	8003bf4 <_sbrk_r>
 8003be4:	3001      	adds	r0, #1
 8003be6:	d0cf      	beq.n	8003b88 <_malloc_r+0x48>
 8003be8:	6025      	str	r5, [r4, #0]
 8003bea:	e7db      	b.n	8003ba4 <_malloc_r+0x64>
 8003bec:	200000a4 	.word	0x200000a4
 8003bf0:	200000a8 	.word	0x200000a8

08003bf4 <_sbrk_r>:
 8003bf4:	b538      	push	{r3, r4, r5, lr}
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	4c05      	ldr	r4, [pc, #20]	; (8003c10 <_sbrk_r+0x1c>)
 8003bfa:	4605      	mov	r5, r0
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	6023      	str	r3, [r4, #0]
 8003c00:	f7fc fee6 	bl	80009d0 <_sbrk>
 8003c04:	1c43      	adds	r3, r0, #1
 8003c06:	d102      	bne.n	8003c0e <_sbrk_r+0x1a>
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	b103      	cbz	r3, 8003c0e <_sbrk_r+0x1a>
 8003c0c:	602b      	str	r3, [r5, #0]
 8003c0e:	bd38      	pop	{r3, r4, r5, pc}
 8003c10:	20000298 	.word	0x20000298

08003c14 <_raise_r>:
 8003c14:	291f      	cmp	r1, #31
 8003c16:	b538      	push	{r3, r4, r5, lr}
 8003c18:	4604      	mov	r4, r0
 8003c1a:	460d      	mov	r5, r1
 8003c1c:	d904      	bls.n	8003c28 <_raise_r+0x14>
 8003c1e:	2316      	movs	r3, #22
 8003c20:	6003      	str	r3, [r0, #0]
 8003c22:	f04f 30ff 	mov.w	r0, #4294967295
 8003c26:	bd38      	pop	{r3, r4, r5, pc}
 8003c28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003c2a:	b112      	cbz	r2, 8003c32 <_raise_r+0x1e>
 8003c2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003c30:	b94b      	cbnz	r3, 8003c46 <_raise_r+0x32>
 8003c32:	4620      	mov	r0, r4
 8003c34:	f000 f830 	bl	8003c98 <_getpid_r>
 8003c38:	462a      	mov	r2, r5
 8003c3a:	4601      	mov	r1, r0
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c42:	f000 b817 	b.w	8003c74 <_kill_r>
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d00a      	beq.n	8003c60 <_raise_r+0x4c>
 8003c4a:	1c59      	adds	r1, r3, #1
 8003c4c:	d103      	bne.n	8003c56 <_raise_r+0x42>
 8003c4e:	2316      	movs	r3, #22
 8003c50:	6003      	str	r3, [r0, #0]
 8003c52:	2001      	movs	r0, #1
 8003c54:	e7e7      	b.n	8003c26 <_raise_r+0x12>
 8003c56:	2400      	movs	r4, #0
 8003c58:	4628      	mov	r0, r5
 8003c5a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003c5e:	4798      	blx	r3
 8003c60:	2000      	movs	r0, #0
 8003c62:	e7e0      	b.n	8003c26 <_raise_r+0x12>

08003c64 <raise>:
 8003c64:	4b02      	ldr	r3, [pc, #8]	; (8003c70 <raise+0xc>)
 8003c66:	4601      	mov	r1, r0
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	f7ff bfd3 	b.w	8003c14 <_raise_r>
 8003c6e:	bf00      	nop
 8003c70:	2000000c 	.word	0x2000000c

08003c74 <_kill_r>:
 8003c74:	b538      	push	{r3, r4, r5, lr}
 8003c76:	2300      	movs	r3, #0
 8003c78:	4c06      	ldr	r4, [pc, #24]	; (8003c94 <_kill_r+0x20>)
 8003c7a:	4605      	mov	r5, r0
 8003c7c:	4608      	mov	r0, r1
 8003c7e:	4611      	mov	r1, r2
 8003c80:	6023      	str	r3, [r4, #0]
 8003c82:	f7fc fe8a 	bl	800099a <_kill>
 8003c86:	1c43      	adds	r3, r0, #1
 8003c88:	d102      	bne.n	8003c90 <_kill_r+0x1c>
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	b103      	cbz	r3, 8003c90 <_kill_r+0x1c>
 8003c8e:	602b      	str	r3, [r5, #0]
 8003c90:	bd38      	pop	{r3, r4, r5, pc}
 8003c92:	bf00      	nop
 8003c94:	20000298 	.word	0x20000298

08003c98 <_getpid_r>:
 8003c98:	f7fc be78 	b.w	800098c <_getpid>

08003c9c <__malloc_lock>:
 8003c9c:	4770      	bx	lr

08003c9e <__malloc_unlock>:
 8003c9e:	4770      	bx	lr

08003ca0 <_init>:
 8003ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca2:	bf00      	nop
 8003ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca6:	bc08      	pop	{r3}
 8003ca8:	469e      	mov	lr, r3
 8003caa:	4770      	bx	lr

08003cac <_fini>:
 8003cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cae:	bf00      	nop
 8003cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb2:	bc08      	pop	{r3}
 8003cb4:	469e      	mov	lr, r3
 8003cb6:	4770      	bx	lr
