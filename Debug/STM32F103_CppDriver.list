
STM32F103_CppDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ea0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002084  08002084  00012084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020b0  080020b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080020b0  080020b0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020b0  080020b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020b0  080020b0  000120b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020b4  080020b4  000120b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080020b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000070  08002128  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08002128  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d05  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c23  00000000  00000000  00027d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007a0  00000000  00000000  000299c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000698  00000000  00000000  0002a168  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000181eb  00000000  00000000  0002a800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007e76  00000000  00000000  000429eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007a223  00000000  00000000  0004a861  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c4a84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ecc  00000000  00000000  000c4b00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	0800206c 	.word	0x0800206c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	0800206c 	.word	0x0800206c

08000224 <_ZN12UartFixedLenC1EP20__UART_HandleTypeDef>:
	uint8_t crc;
} UartFixedFrame_t;
class UartFixedLen
{
public:
	UartFixedLen(UART_HandleTypeDef *huart) :
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	6039      	str	r1, [r7, #0]
			_uart(huart), _sendFrame
			{ 0 }, _recvFrame
			{ 0 }, _uartRecvFlag(0)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	683a      	ldr	r2, [r7, #0]
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3304      	adds	r3, #4
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]
 8000240:	60da      	str	r2, [r3, #12]
 8000242:	611a      	str	r2, [r3, #16]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3318      	adds	r3, #24
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2200      	movs	r2, #0
 8000258:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	22aa      	movs	r2, #170	; 0xaa
 8000260:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	{

	}
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	4618      	mov	r0, r3
 8000268:	370c      	adds	r7, #12
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr

08000270 <_ZN11UartFlexLenC1EP20__UART_HandleTypeDef>:
#define UART_FLEX_LEN_MAX_SIZE (20)

class UartFlexLen
{
public:
	UartFlexLen(UART_HandleTypeDef *huart) :
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
			_uart(huart), _data
	{	0}, _index(0), _state(0), _frame
	{	0}, _getFrame(0)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	683a      	ldr	r2, [r7, #0]
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2214      	movs	r2, #20
 8000284:	711a      	strb	r2, [r3, #4]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2200      	movs	r2, #0
 800028a:	715a      	strb	r2, [r3, #5]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2200      	movs	r2, #0
 8000290:	719a      	strb	r2, [r3, #6]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2200      	movs	r2, #0
 8000296:	71da      	strb	r2, [r3, #7]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	3308      	adds	r3, #8
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	609a      	str	r2, [r3, #8]
 80002a4:	60da      	str	r2, [r3, #12]
 80002a6:	611a      	str	r2, [r3, #16]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2200      	movs	r2, #0
 80002ac:	771a      	strb	r2, [r3, #28]
	{

	}
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4618      	mov	r0, r3
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bc80      	pop	{r7}
 80002b8:	4770      	bx	lr
	...

080002bc <AppInit>:

UartFixedLen *pUartFixed;
UartFlexLen *pUartFlex;

void AppInit()
{
 80002bc:	b598      	push	{r3, r4, r7, lr}
 80002be:	af00      	add	r7, sp, #0
	pUartFixed = new UartFixedLen(&huart1);
 80002c0:	2030      	movs	r0, #48	; 0x30
 80002c2:	f001 fdc7 	bl	8001e54 <_Znwj>
 80002c6:	4603      	mov	r3, r0
 80002c8:	461c      	mov	r4, r3
 80002ca:	4909      	ldr	r1, [pc, #36]	; (80002f0 <AppInit+0x34>)
 80002cc:	4620      	mov	r0, r4
 80002ce:	f7ff ffa9 	bl	8000224 <_ZN12UartFixedLenC1EP20__UART_HandleTypeDef>
 80002d2:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <AppInit+0x38>)
 80002d4:	601c      	str	r4, [r3, #0]
	pUartFlex = new UartFlexLen(&huart2);
 80002d6:	2020      	movs	r0, #32
 80002d8:	f001 fdbc 	bl	8001e54 <_Znwj>
 80002dc:	4603      	mov	r3, r0
 80002de:	461c      	mov	r4, r3
 80002e0:	4905      	ldr	r1, [pc, #20]	; (80002f8 <AppInit+0x3c>)
 80002e2:	4620      	mov	r0, r4
 80002e4:	f7ff ffc4 	bl	8000270 <_ZN11UartFlexLenC1EP20__UART_HandleTypeDef>
 80002e8:	4b04      	ldr	r3, [pc, #16]	; (80002fc <AppInit+0x40>)
 80002ea:	601c      	str	r4, [r3, #0]
}
 80002ec:	bf00      	nop
 80002ee:	bd98      	pop	{r3, r4, r7, pc}
 80002f0:	2000012c 	.word	0x2000012c
 80002f4:	2000008c 	.word	0x2000008c
 80002f8:	2000016c 	.word	0x2000016c
 80002fc:	20000090 	.word	0x20000090

08000300 <AppLoop>:

void AppLoop()
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0

}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr

0800030c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000312:	4b10      	ldr	r3, [pc, #64]	; (8000354 <MX_DMA_Init+0x48>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a0f      	ldr	r2, [pc, #60]	; (8000354 <MX_DMA_Init+0x48>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	6153      	str	r3, [r2, #20]
 800031e:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <MX_DMA_Init+0x48>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800032a:	2200      	movs	r2, #0
 800032c:	2100      	movs	r1, #0
 800032e:	200f      	movs	r0, #15
 8000330:	f000 fbf9 	bl	8000b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000334:	200f      	movs	r0, #15
 8000336:	f000 fc12 	bl	8000b5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800033a:	2200      	movs	r2, #0
 800033c:	2100      	movs	r1, #0
 800033e:	2010      	movs	r0, #16
 8000340:	f000 fbf1 	bl	8000b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000344:	2010      	movs	r0, #16
 8000346:	f000 fc0a 	bl	8000b5e <HAL_NVIC_EnableIRQ>

}
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40021000 	.word	0x40021000

08000358 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <MX_GPIO_Init+0x28>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	4a07      	ldr	r2, [pc, #28]	; (8000380 <MX_GPIO_Init+0x28>)
 8000364:	f043 0304 	orr.w	r3, r3, #4
 8000368:	6193      	str	r3, [r2, #24]
 800036a:	4b05      	ldr	r3, [pc, #20]	; (8000380 <MX_GPIO_Init+0x28>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	f003 0304 	and.w	r3, r3, #4
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]

}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	40021000 	.word	0x40021000

08000384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000388:	f000 fa94 	bl	80008b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800038c:	f000 f80d 	bl	80003aa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000390:	f7ff ffe2 	bl	8000358 <MX_GPIO_Init>
  MX_DMA_Init();
 8000394:	f7ff ffba 	bl	800030c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000398:	f000 f93a 	bl	8000610 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800039c:	f000 f962 	bl	8000664 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	AppInit();
 80003a0:	f7ff ff8c 	bl	80002bc <AppInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		AppLoop();
 80003a4:	f7ff ffac 	bl	8000300 <AppLoop>
 80003a8:	e7fc      	b.n	80003a4 <main+0x20>

080003aa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b090      	sub	sp, #64	; 0x40
 80003ae:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b0:	f107 0318 	add.w	r3, r7, #24
 80003b4:	2228      	movs	r2, #40	; 0x28
 80003b6:	2100      	movs	r1, #0
 80003b8:	4618      	mov	r0, r3
 80003ba:	f001 fd9f 	bl	8001efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
 80003ca:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003cc:	2302      	movs	r3, #2
 80003ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d0:	2301      	movs	r3, #1
 80003d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d4:	2310      	movs	r3, #16
 80003d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003d8:	2300      	movs	r3, #0
 80003da:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003dc:	f107 0318 	add.w	r3, r7, #24
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fff3 	bl	80013cc <HAL_RCC_OscConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003ec:	f000 f818 	bl	8000420 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f0:	230f      	movs	r3, #15
 80003f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2100      	movs	r1, #0
 8000408:	4618      	mov	r0, r3
 800040a:	f001 fa5f 	bl	80018cc <HAL_RCC_ClockConfig>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000414:	f000 f804 	bl	8000420 <Error_Handler>
  }
}
 8000418:	bf00      	nop
 800041a:	3740      	adds	r7, #64	; 0x40
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr

0800042c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000432:	4b15      	ldr	r3, [pc, #84]	; (8000488 <HAL_MspInit+0x5c>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4a14      	ldr	r2, [pc, #80]	; (8000488 <HAL_MspInit+0x5c>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	6193      	str	r3, [r2, #24]
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <HAL_MspInit+0x5c>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <HAL_MspInit+0x5c>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	4a0e      	ldr	r2, [pc, #56]	; (8000488 <HAL_MspInit+0x5c>)
 8000450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000454:	61d3      	str	r3, [r2, #28]
 8000456:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <HAL_MspInit+0x5c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000462:	4b0a      	ldr	r3, [pc, #40]	; (800048c <HAL_MspInit+0x60>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	4a04      	ldr	r2, [pc, #16]	; (800048c <HAL_MspInit+0x60>)
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047e:	bf00      	nop
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	40021000 	.word	0x40021000
 800048c:	40010000 	.word	0x40010000

08000490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <HardFault_Handler+0x4>

080004a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <MemManage_Handler+0x4>

080004a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <BusFault_Handler+0x4>

080004ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <UsageFault_Handler+0x4>

080004b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004dc:	f000 fa30 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80004e8:	4802      	ldr	r0, [pc, #8]	; (80004f4 <DMA1_Channel5_IRQHandler+0x10>)
 80004ea:	f000 fbc9 	bl	8000c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200000e8 	.word	0x200000e8

080004f8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <DMA1_Channel6_IRQHandler+0x10>)
 80004fe:	f000 fbbf 	bl	8000c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	200000a4 	.word	0x200000a4

0800050c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
	return 1;
 8000510:	2301      	movs	r3, #1
}
 8000512:	4618      	mov	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr

0800051a <_kill>:

int _kill(int pid, int sig)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000524:	f001 fcb8 	bl	8001e98 <__errno>
 8000528:	4602      	mov	r2, r0
 800052a:	2316      	movs	r3, #22
 800052c:	6013      	str	r3, [r2, #0]
	return -1;
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000532:	4618      	mov	r0, r3
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <_exit>:

void _exit (int status)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000542:	f04f 31ff 	mov.w	r1, #4294967295
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f7ff ffe7 	bl	800051a <_kill>
	while (1) {}		/* Make sure we hang here */
 800054c:	e7fe      	b.n	800054c <_exit+0x12>
	...

08000550 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000558:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <_sbrk+0x50>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d102      	bne.n	8000566 <_sbrk+0x16>
		heap_end = &end;
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <_sbrk+0x50>)
 8000562:	4a10      	ldr	r2, [pc, #64]	; (80005a4 <_sbrk+0x54>)
 8000564:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <_sbrk+0x50>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <_sbrk+0x50>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4413      	add	r3, r2
 8000574:	466a      	mov	r2, sp
 8000576:	4293      	cmp	r3, r2
 8000578:	d907      	bls.n	800058a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800057a:	f001 fc8d 	bl	8001e98 <__errno>
 800057e:	4602      	mov	r2, r0
 8000580:	230c      	movs	r3, #12
 8000582:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
 8000588:	e006      	b.n	8000598 <_sbrk+0x48>
	}

	heap_end += incr;
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <_sbrk+0x50>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <_sbrk+0x50>)
 8000594:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000596:	68fb      	ldr	r3, [r7, #12]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000094 	.word	0x20000094
 80005a4:	200001b8 	.word	0x200001b8

080005a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <SystemInit+0x5c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a14      	ldr	r2, [pc, #80]	; (8000604 <SystemInit+0x5c>)
 80005b2:	f043 0301 	orr.w	r3, r3, #1
 80005b6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <SystemInit+0x5c>)
 80005ba:	685a      	ldr	r2, [r3, #4]
 80005bc:	4911      	ldr	r1, [pc, #68]	; (8000604 <SystemInit+0x5c>)
 80005be:	4b12      	ldr	r3, [pc, #72]	; (8000608 <SystemInit+0x60>)
 80005c0:	4013      	ands	r3, r2
 80005c2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <SystemInit+0x5c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <SystemInit+0x5c>)
 80005ca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005d2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <SystemInit+0x5c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <SystemInit+0x5c>)
 80005da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005de:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <SystemInit+0x5c>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	4a07      	ldr	r2, [pc, #28]	; (8000604 <SystemInit+0x5c>)
 80005e6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005ea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <SystemInit+0x5c>)
 80005ee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005f2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <SystemInit+0x64>)
 80005f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005fa:	609a      	str	r2, [r3, #8]
#endif 
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	40021000 	.word	0x40021000
 8000608:	f8ff0000 	.word	0xf8ff0000
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_USART1_UART_Init+0x4c>)
 8000616:	4a12      	ldr	r2, [pc, #72]	; (8000660 <MX_USART1_UART_Init+0x50>)
 8000618:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <MX_USART1_UART_Init+0x4c>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_USART1_UART_Init+0x4c>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_USART1_UART_Init+0x4c>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_USART1_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_USART1_UART_Init+0x4c>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_USART1_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_USART1_UART_Init+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_USART1_UART_Init+0x4c>)
 8000648:	f001 fadc 	bl	8001c04 <HAL_UART_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000652:	f7ff fee5 	bl	8000420 <Error_Handler>
  }

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	2000012c 	.word	0x2000012c
 8000660:	40013800 	.word	0x40013800

08000664 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <MX_USART2_UART_Init+0x50>)
 800066c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800069c:	f001 fab2 	bl	8001c04 <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006a6:	f7ff febb 	bl	8000420 <Error_Handler>
  }

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000016c 	.word	0x2000016c
 80006b4:	40004400 	.word	0x40004400

080006b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0318 	add.w	r3, r7, #24
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a5d      	ldr	r2, [pc, #372]	; (8000848 <HAL_UART_MspInit+0x190>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d158      	bne.n	800078a <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006d8:	4b5c      	ldr	r3, [pc, #368]	; (800084c <HAL_UART_MspInit+0x194>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a5b      	ldr	r2, [pc, #364]	; (800084c <HAL_UART_MspInit+0x194>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b59      	ldr	r3, [pc, #356]	; (800084c <HAL_UART_MspInit+0x194>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ec:	617b      	str	r3, [r7, #20]
 80006ee:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f0:	4b56      	ldr	r3, [pc, #344]	; (800084c <HAL_UART_MspInit+0x194>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a55      	ldr	r2, [pc, #340]	; (800084c <HAL_UART_MspInit+0x194>)
 80006f6:	f043 0304 	orr.w	r3, r3, #4
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b53      	ldr	r3, [pc, #332]	; (800084c <HAL_UART_MspInit+0x194>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0304 	and.w	r3, r3, #4
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800070c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070e:	2302      	movs	r3, #2
 8000710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f107 0318 	add.w	r3, r7, #24
 800071a:	4619      	mov	r1, r3
 800071c:	484c      	ldr	r0, [pc, #304]	; (8000850 <HAL_UART_MspInit+0x198>)
 800071e:	f000 fceb 	bl	80010f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	f107 0318 	add.w	r3, r7, #24
 8000734:	4619      	mov	r1, r3
 8000736:	4846      	ldr	r0, [pc, #280]	; (8000850 <HAL_UART_MspInit+0x198>)
 8000738:	f000 fcde 	bl	80010f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800073c:	4b45      	ldr	r3, [pc, #276]	; (8000854 <HAL_UART_MspInit+0x19c>)
 800073e:	4a46      	ldr	r2, [pc, #280]	; (8000858 <HAL_UART_MspInit+0x1a0>)
 8000740:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000742:	4b44      	ldr	r3, [pc, #272]	; (8000854 <HAL_UART_MspInit+0x19c>)
 8000744:	2200      	movs	r2, #0
 8000746:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000748:	4b42      	ldr	r3, [pc, #264]	; (8000854 <HAL_UART_MspInit+0x19c>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800074e:	4b41      	ldr	r3, [pc, #260]	; (8000854 <HAL_UART_MspInit+0x19c>)
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000754:	4b3f      	ldr	r3, [pc, #252]	; (8000854 <HAL_UART_MspInit+0x19c>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800075a:	4b3e      	ldr	r3, [pc, #248]	; (8000854 <HAL_UART_MspInit+0x19c>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000760:	4b3c      	ldr	r3, [pc, #240]	; (8000854 <HAL_UART_MspInit+0x19c>)
 8000762:	2220      	movs	r2, #32
 8000764:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000766:	4b3b      	ldr	r3, [pc, #236]	; (8000854 <HAL_UART_MspInit+0x19c>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800076c:	4839      	ldr	r0, [pc, #228]	; (8000854 <HAL_UART_MspInit+0x19c>)
 800076e:	f000 fa11 	bl	8000b94 <HAL_DMA_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000778:	f7ff fe52 	bl	8000420 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a35      	ldr	r2, [pc, #212]	; (8000854 <HAL_UART_MspInit+0x19c>)
 8000780:	635a      	str	r2, [r3, #52]	; 0x34
 8000782:	4a34      	ldr	r2, [pc, #208]	; (8000854 <HAL_UART_MspInit+0x19c>)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000788:	e05a      	b.n	8000840 <HAL_UART_MspInit+0x188>
  else if(uartHandle->Instance==USART2)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a33      	ldr	r2, [pc, #204]	; (800085c <HAL_UART_MspInit+0x1a4>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d155      	bne.n	8000840 <HAL_UART_MspInit+0x188>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000794:	4b2d      	ldr	r3, [pc, #180]	; (800084c <HAL_UART_MspInit+0x194>)
 8000796:	69db      	ldr	r3, [r3, #28]
 8000798:	4a2c      	ldr	r2, [pc, #176]	; (800084c <HAL_UART_MspInit+0x194>)
 800079a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800079e:	61d3      	str	r3, [r2, #28]
 80007a0:	4b2a      	ldr	r3, [pc, #168]	; (800084c <HAL_UART_MspInit+0x194>)
 80007a2:	69db      	ldr	r3, [r3, #28]
 80007a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	4b27      	ldr	r3, [pc, #156]	; (800084c <HAL_UART_MspInit+0x194>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a26      	ldr	r2, [pc, #152]	; (800084c <HAL_UART_MspInit+0x194>)
 80007b2:	f043 0304 	orr.w	r3, r3, #4
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b24      	ldr	r3, [pc, #144]	; (800084c <HAL_UART_MspInit+0x194>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007c4:	2304      	movs	r3, #4
 80007c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 0318 	add.w	r3, r7, #24
 80007d4:	4619      	mov	r1, r3
 80007d6:	481e      	ldr	r0, [pc, #120]	; (8000850 <HAL_UART_MspInit+0x198>)
 80007d8:	f000 fc8e 	bl	80010f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007dc:	2308      	movs	r3, #8
 80007de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 0318 	add.w	r3, r7, #24
 80007ec:	4619      	mov	r1, r3
 80007ee:	4818      	ldr	r0, [pc, #96]	; (8000850 <HAL_UART_MspInit+0x198>)
 80007f0:	f000 fc82 	bl	80010f8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <HAL_UART_MspInit+0x1a8>)
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <HAL_UART_MspInit+0x1ac>)
 80007f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <HAL_UART_MspInit+0x1a8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <HAL_UART_MspInit+0x1a8>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <HAL_UART_MspInit+0x1a8>)
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <HAL_UART_MspInit+0x1a8>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <HAL_UART_MspInit+0x1a8>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_UART_MspInit+0x1a8>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <HAL_UART_MspInit+0x1a8>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000824:	480e      	ldr	r0, [pc, #56]	; (8000860 <HAL_UART_MspInit+0x1a8>)
 8000826:	f000 f9b5 	bl	8000b94 <HAL_DMA_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8000830:	f7ff fdf6 	bl	8000420 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <HAL_UART_MspInit+0x1a8>)
 8000838:	635a      	str	r2, [r3, #52]	; 0x34
 800083a:	4a09      	ldr	r2, [pc, #36]	; (8000860 <HAL_UART_MspInit+0x1a8>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	; 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40013800 	.word	0x40013800
 800084c:	40021000 	.word	0x40021000
 8000850:	40010800 	.word	0x40010800
 8000854:	200000e8 	.word	0x200000e8
 8000858:	40020058 	.word	0x40020058
 800085c:	40004400 	.word	0x40004400
 8000860:	200000a4 	.word	0x200000a4
 8000864:	4002006c 	.word	0x4002006c

08000868 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000868:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800086a:	e003      	b.n	8000874 <LoopCopyDataInit>

0800086c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800086c:	4b0b      	ldr	r3, [pc, #44]	; (800089c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800086e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000870:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000872:	3104      	adds	r1, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000874:	480a      	ldr	r0, [pc, #40]	; (80008a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000878:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800087a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800087c:	d3f6      	bcc.n	800086c <CopyDataInit>
  ldr r2, =_sbss
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000880:	e002      	b.n	8000888 <LoopFillZerobss>

08000882 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000884:	f842 3b04 	str.w	r3, [r2], #4

08000888 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800088a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800088c:	d3f9      	bcc.n	8000882 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800088e:	f7ff fe8b 	bl	80005a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000892:	f001 fb07 	bl	8001ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000896:	f7ff fd75 	bl	8000384 <main>
  bx lr
 800089a:	4770      	bx	lr
  ldr r3, =_sidata
 800089c:	080020b8 	.word	0x080020b8
  ldr r0, =_sdata
 80008a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008a4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80008a8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80008ac:	200001b4 	.word	0x200001b4

080008b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b0:	e7fe      	b.n	80008b0 <ADC1_2_IRQHandler>
	...

080008b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <HAL_Init+0x28>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a07      	ldr	r2, [pc, #28]	; (80008dc <HAL_Init+0x28>)
 80008be:	f043 0310 	orr.w	r3, r3, #16
 80008c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c4:	2003      	movs	r0, #3
 80008c6:	f000 f923 	bl	8000b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f000 f808 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d0:	f7ff fdac 	bl	800042c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40022000 	.word	0x40022000

080008e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_InitTick+0x54>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_InitTick+0x58>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f93b 	bl	8000b7a <HAL_SYSTICK_Config>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e00e      	b.n	800092c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b0f      	cmp	r3, #15
 8000912:	d80a      	bhi.n	800092a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000914:	2200      	movs	r2, #0
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	f000 f903 	bl	8000b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000920:	4a06      	ldr	r2, [pc, #24]	; (800093c <HAL_InitTick+0x5c>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000926:	2300      	movs	r3, #0
 8000928:	e000      	b.n	800092c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000000 	.word	0x20000000
 8000938:	20000008 	.word	0x20000008
 800093c:	20000004 	.word	0x20000004

08000940 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <HAL_IncTick+0x1c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_IncTick+0x20>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a03      	ldr	r2, [pc, #12]	; (8000960 <HAL_IncTick+0x20>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	20000008 	.word	0x20000008
 8000960:	200001ac 	.word	0x200001ac

08000964 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return uwTick;
 8000968:	4b02      	ldr	r3, [pc, #8]	; (8000974 <HAL_GetTick+0x10>)
 800096a:	681b      	ldr	r3, [r3, #0]
}
 800096c:	4618      	mov	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	200001ac 	.word	0x200001ac

08000978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000994:	4013      	ands	r3, r2
 8000996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009aa:	4a04      	ldr	r2, [pc, #16]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	60d3      	str	r3, [r2, #12]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <__NVIC_GetPriorityGrouping+0x18>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	0a1b      	lsrs	r3, r3, #8
 80009ca:	f003 0307 	and.w	r3, r3, #7
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db0b      	blt.n	8000a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	f003 021f 	and.w	r2, r3, #31
 80009f4:	4906      	ldr	r1, [pc, #24]	; (8000a10 <__NVIC_EnableIRQ+0x34>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	095b      	lsrs	r3, r3, #5
 80009fc:	2001      	movs	r0, #1
 80009fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	e000e100 	.word	0xe000e100

08000a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	db0a      	blt.n	8000a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	490c      	ldr	r1, [pc, #48]	; (8000a60 <__NVIC_SetPriority+0x4c>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	b2d2      	uxtb	r2, r2
 8000a36:	440b      	add	r3, r1
 8000a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a3c:	e00a      	b.n	8000a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4908      	ldr	r1, [pc, #32]	; (8000a64 <__NVIC_SetPriority+0x50>)
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	3b04      	subs	r3, #4
 8000a4c:	0112      	lsls	r2, r2, #4
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	440b      	add	r3, r1
 8000a52:	761a      	strb	r2, [r3, #24]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000e100 	.word	0xe000e100
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b089      	sub	sp, #36	; 0x24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f1c3 0307 	rsb	r3, r3, #7
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	bf28      	it	cs
 8000a86:	2304      	movcs	r3, #4
 8000a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d902      	bls.n	8000a98 <NVIC_EncodePriority+0x30>
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3b03      	subs	r3, #3
 8000a96:	e000      	b.n	8000a9a <NVIC_EncodePriority+0x32>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	401a      	ands	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	43d9      	mvns	r1, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	4313      	orrs	r3, r2
         );
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3724      	adds	r7, #36	; 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000adc:	d301      	bcc.n	8000ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00f      	b.n	8000b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <SysTick_Config+0x40>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aea:	210f      	movs	r1, #15
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f7ff ff90 	bl	8000a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <SysTick_Config+0x40>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afa:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <SysTick_Config+0x40>)
 8000afc:	2207      	movs	r2, #7
 8000afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	e000e010 	.word	0xe000e010

08000b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ff2d 	bl	8000978 <__NVIC_SetPriorityGrouping>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b38:	f7ff ff42 	bl	80009c0 <__NVIC_GetPriorityGrouping>
 8000b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	68b9      	ldr	r1, [r7, #8]
 8000b42:	6978      	ldr	r0, [r7, #20]
 8000b44:	f7ff ff90 	bl	8000a68 <NVIC_EncodePriority>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff5f 	bl	8000a14 <__NVIC_SetPriority>
}
 8000b56:	bf00      	nop
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff35 	bl	80009dc <__NVIC_EnableIRQ>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff ffa2 	bl	8000acc <SysTick_Config>
 8000b88:	4603      	mov	r3, r0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e059      	b.n	8000c5e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <HAL_DMA_Init+0xd4>)
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d80f      	bhi.n	8000bd6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <HAL_DMA_Init+0xd8>)
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a2b      	ldr	r2, [pc, #172]	; (8000c70 <HAL_DMA_Init+0xdc>)
 8000bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc6:	091b      	lsrs	r3, r3, #4
 8000bc8:	009a      	lsls	r2, r3, #2
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a28      	ldr	r2, [pc, #160]	; (8000c74 <HAL_DMA_Init+0xe0>)
 8000bd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bd4:	e00e      	b.n	8000bf4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <HAL_DMA_Init+0xe4>)
 8000bde:	4413      	add	r3, r2
 8000be0:	4a23      	ldr	r2, [pc, #140]	; (8000c70 <HAL_DMA_Init+0xdc>)
 8000be2:	fba2 2303 	umull	r2, r3, r2, r3
 8000be6:	091b      	lsrs	r3, r3, #4
 8000be8:	009a      	lsls	r2, r3, #2
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a22      	ldr	r2, [pc, #136]	; (8000c7c <HAL_DMA_Init+0xe8>)
 8000bf2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c0a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	40020407 	.word	0x40020407
 8000c6c:	bffdfff8 	.word	0xbffdfff8
 8000c70:	cccccccd 	.word	0xcccccccd
 8000c74:	40020000 	.word	0x40020000
 8000c78:	bffdfbf8 	.word	0xbffdfbf8
 8000c7c:	40020400 	.word	0x40020400

08000c80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	409a      	lsls	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 80d6 	beq.w	8000e56 <HAL_DMA_IRQHandler+0x1d6>
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	f003 0304 	and.w	r3, r3, #4
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	f000 80d0 	beq.w	8000e56 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0320 	and.w	r3, r3, #32
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d107      	bne.n	8000cd4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f022 0204 	bic.w	r2, r2, #4
 8000cd2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b9b      	ldr	r3, [pc, #620]	; (8000f48 <HAL_DMA_IRQHandler+0x2c8>)
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d958      	bls.n	8000d92 <HAL_DMA_IRQHandler+0x112>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a99      	ldr	r2, [pc, #612]	; (8000f4c <HAL_DMA_IRQHandler+0x2cc>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d04f      	beq.n	8000d8a <HAL_DMA_IRQHandler+0x10a>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a98      	ldr	r2, [pc, #608]	; (8000f50 <HAL_DMA_IRQHandler+0x2d0>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d048      	beq.n	8000d86 <HAL_DMA_IRQHandler+0x106>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a96      	ldr	r2, [pc, #600]	; (8000f54 <HAL_DMA_IRQHandler+0x2d4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d040      	beq.n	8000d80 <HAL_DMA_IRQHandler+0x100>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a95      	ldr	r2, [pc, #596]	; (8000f58 <HAL_DMA_IRQHandler+0x2d8>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d038      	beq.n	8000d7a <HAL_DMA_IRQHandler+0xfa>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a93      	ldr	r2, [pc, #588]	; (8000f5c <HAL_DMA_IRQHandler+0x2dc>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d030      	beq.n	8000d74 <HAL_DMA_IRQHandler+0xf4>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a92      	ldr	r2, [pc, #584]	; (8000f60 <HAL_DMA_IRQHandler+0x2e0>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d028      	beq.n	8000d6e <HAL_DMA_IRQHandler+0xee>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a89      	ldr	r2, [pc, #548]	; (8000f48 <HAL_DMA_IRQHandler+0x2c8>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d020      	beq.n	8000d68 <HAL_DMA_IRQHandler+0xe8>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a8e      	ldr	r2, [pc, #568]	; (8000f64 <HAL_DMA_IRQHandler+0x2e4>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d019      	beq.n	8000d64 <HAL_DMA_IRQHandler+0xe4>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a8c      	ldr	r2, [pc, #560]	; (8000f68 <HAL_DMA_IRQHandler+0x2e8>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d012      	beq.n	8000d60 <HAL_DMA_IRQHandler+0xe0>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a8b      	ldr	r2, [pc, #556]	; (8000f6c <HAL_DMA_IRQHandler+0x2ec>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d00a      	beq.n	8000d5a <HAL_DMA_IRQHandler+0xda>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a89      	ldr	r2, [pc, #548]	; (8000f70 <HAL_DMA_IRQHandler+0x2f0>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d102      	bne.n	8000d54 <HAL_DMA_IRQHandler+0xd4>
 8000d4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d52:	e01b      	b.n	8000d8c <HAL_DMA_IRQHandler+0x10c>
 8000d54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d58:	e018      	b.n	8000d8c <HAL_DMA_IRQHandler+0x10c>
 8000d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5e:	e015      	b.n	8000d8c <HAL_DMA_IRQHandler+0x10c>
 8000d60:	2340      	movs	r3, #64	; 0x40
 8000d62:	e013      	b.n	8000d8c <HAL_DMA_IRQHandler+0x10c>
 8000d64:	2304      	movs	r3, #4
 8000d66:	e011      	b.n	8000d8c <HAL_DMA_IRQHandler+0x10c>
 8000d68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d6c:	e00e      	b.n	8000d8c <HAL_DMA_IRQHandler+0x10c>
 8000d6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d72:	e00b      	b.n	8000d8c <HAL_DMA_IRQHandler+0x10c>
 8000d74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d78:	e008      	b.n	8000d8c <HAL_DMA_IRQHandler+0x10c>
 8000d7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d7e:	e005      	b.n	8000d8c <HAL_DMA_IRQHandler+0x10c>
 8000d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d84:	e002      	b.n	8000d8c <HAL_DMA_IRQHandler+0x10c>
 8000d86:	2340      	movs	r3, #64	; 0x40
 8000d88:	e000      	b.n	8000d8c <HAL_DMA_IRQHandler+0x10c>
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	4a79      	ldr	r2, [pc, #484]	; (8000f74 <HAL_DMA_IRQHandler+0x2f4>)
 8000d8e:	6053      	str	r3, [r2, #4]
 8000d90:	e057      	b.n	8000e42 <HAL_DMA_IRQHandler+0x1c2>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a6d      	ldr	r2, [pc, #436]	; (8000f4c <HAL_DMA_IRQHandler+0x2cc>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d04f      	beq.n	8000e3c <HAL_DMA_IRQHandler+0x1bc>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a6b      	ldr	r2, [pc, #428]	; (8000f50 <HAL_DMA_IRQHandler+0x2d0>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d048      	beq.n	8000e38 <HAL_DMA_IRQHandler+0x1b8>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a6a      	ldr	r2, [pc, #424]	; (8000f54 <HAL_DMA_IRQHandler+0x2d4>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d040      	beq.n	8000e32 <HAL_DMA_IRQHandler+0x1b2>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a68      	ldr	r2, [pc, #416]	; (8000f58 <HAL_DMA_IRQHandler+0x2d8>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d038      	beq.n	8000e2c <HAL_DMA_IRQHandler+0x1ac>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a67      	ldr	r2, [pc, #412]	; (8000f5c <HAL_DMA_IRQHandler+0x2dc>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d030      	beq.n	8000e26 <HAL_DMA_IRQHandler+0x1a6>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a65      	ldr	r2, [pc, #404]	; (8000f60 <HAL_DMA_IRQHandler+0x2e0>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d028      	beq.n	8000e20 <HAL_DMA_IRQHandler+0x1a0>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a5d      	ldr	r2, [pc, #372]	; (8000f48 <HAL_DMA_IRQHandler+0x2c8>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d020      	beq.n	8000e1a <HAL_DMA_IRQHandler+0x19a>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a61      	ldr	r2, [pc, #388]	; (8000f64 <HAL_DMA_IRQHandler+0x2e4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d019      	beq.n	8000e16 <HAL_DMA_IRQHandler+0x196>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a60      	ldr	r2, [pc, #384]	; (8000f68 <HAL_DMA_IRQHandler+0x2e8>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d012      	beq.n	8000e12 <HAL_DMA_IRQHandler+0x192>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a5e      	ldr	r2, [pc, #376]	; (8000f6c <HAL_DMA_IRQHandler+0x2ec>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d00a      	beq.n	8000e0c <HAL_DMA_IRQHandler+0x18c>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a5d      	ldr	r2, [pc, #372]	; (8000f70 <HAL_DMA_IRQHandler+0x2f0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d102      	bne.n	8000e06 <HAL_DMA_IRQHandler+0x186>
 8000e00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e04:	e01b      	b.n	8000e3e <HAL_DMA_IRQHandler+0x1be>
 8000e06:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e0a:	e018      	b.n	8000e3e <HAL_DMA_IRQHandler+0x1be>
 8000e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e10:	e015      	b.n	8000e3e <HAL_DMA_IRQHandler+0x1be>
 8000e12:	2340      	movs	r3, #64	; 0x40
 8000e14:	e013      	b.n	8000e3e <HAL_DMA_IRQHandler+0x1be>
 8000e16:	2304      	movs	r3, #4
 8000e18:	e011      	b.n	8000e3e <HAL_DMA_IRQHandler+0x1be>
 8000e1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e1e:	e00e      	b.n	8000e3e <HAL_DMA_IRQHandler+0x1be>
 8000e20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e24:	e00b      	b.n	8000e3e <HAL_DMA_IRQHandler+0x1be>
 8000e26:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e2a:	e008      	b.n	8000e3e <HAL_DMA_IRQHandler+0x1be>
 8000e2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e30:	e005      	b.n	8000e3e <HAL_DMA_IRQHandler+0x1be>
 8000e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e36:	e002      	b.n	8000e3e <HAL_DMA_IRQHandler+0x1be>
 8000e38:	2340      	movs	r3, #64	; 0x40
 8000e3a:	e000      	b.n	8000e3e <HAL_DMA_IRQHandler+0x1be>
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	4a4e      	ldr	r2, [pc, #312]	; (8000f78 <HAL_DMA_IRQHandler+0x2f8>)
 8000e40:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 8136 	beq.w	80010b8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e54:	e130      	b.n	80010b8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4013      	ands	r3, r2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 80f8 	beq.w	8001058 <HAL_DMA_IRQHandler+0x3d8>
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 80f2 	beq.w	8001058 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0320 	and.w	r3, r3, #32
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10b      	bne.n	8000e9a <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 020a 	bic.w	r2, r2, #10
 8000e90:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2201      	movs	r2, #1
 8000e96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b29      	ldr	r3, [pc, #164]	; (8000f48 <HAL_DMA_IRQHandler+0x2c8>)
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d973      	bls.n	8000f8e <HAL_DMA_IRQHandler+0x30e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a28      	ldr	r2, [pc, #160]	; (8000f4c <HAL_DMA_IRQHandler+0x2cc>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d06a      	beq.n	8000f86 <HAL_DMA_IRQHandler+0x306>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a26      	ldr	r2, [pc, #152]	; (8000f50 <HAL_DMA_IRQHandler+0x2d0>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d063      	beq.n	8000f82 <HAL_DMA_IRQHandler+0x302>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a25      	ldr	r2, [pc, #148]	; (8000f54 <HAL_DMA_IRQHandler+0x2d4>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d05b      	beq.n	8000f7c <HAL_DMA_IRQHandler+0x2fc>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a23      	ldr	r2, [pc, #140]	; (8000f58 <HAL_DMA_IRQHandler+0x2d8>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d038      	beq.n	8000f40 <HAL_DMA_IRQHandler+0x2c0>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a22      	ldr	r2, [pc, #136]	; (8000f5c <HAL_DMA_IRQHandler+0x2dc>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d030      	beq.n	8000f3a <HAL_DMA_IRQHandler+0x2ba>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a20      	ldr	r2, [pc, #128]	; (8000f60 <HAL_DMA_IRQHandler+0x2e0>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d028      	beq.n	8000f34 <HAL_DMA_IRQHandler+0x2b4>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a18      	ldr	r2, [pc, #96]	; (8000f48 <HAL_DMA_IRQHandler+0x2c8>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d020      	beq.n	8000f2e <HAL_DMA_IRQHandler+0x2ae>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a1c      	ldr	r2, [pc, #112]	; (8000f64 <HAL_DMA_IRQHandler+0x2e4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d019      	beq.n	8000f2a <HAL_DMA_IRQHandler+0x2aa>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a1b      	ldr	r2, [pc, #108]	; (8000f68 <HAL_DMA_IRQHandler+0x2e8>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d012      	beq.n	8000f26 <HAL_DMA_IRQHandler+0x2a6>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a19      	ldr	r2, [pc, #100]	; (8000f6c <HAL_DMA_IRQHandler+0x2ec>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d00a      	beq.n	8000f20 <HAL_DMA_IRQHandler+0x2a0>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a18      	ldr	r2, [pc, #96]	; (8000f70 <HAL_DMA_IRQHandler+0x2f0>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d102      	bne.n	8000f1a <HAL_DMA_IRQHandler+0x29a>
 8000f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f18:	e036      	b.n	8000f88 <HAL_DMA_IRQHandler+0x308>
 8000f1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f1e:	e033      	b.n	8000f88 <HAL_DMA_IRQHandler+0x308>
 8000f20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f24:	e030      	b.n	8000f88 <HAL_DMA_IRQHandler+0x308>
 8000f26:	2320      	movs	r3, #32
 8000f28:	e02e      	b.n	8000f88 <HAL_DMA_IRQHandler+0x308>
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e02c      	b.n	8000f88 <HAL_DMA_IRQHandler+0x308>
 8000f2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f32:	e029      	b.n	8000f88 <HAL_DMA_IRQHandler+0x308>
 8000f34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f38:	e026      	b.n	8000f88 <HAL_DMA_IRQHandler+0x308>
 8000f3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f3e:	e023      	b.n	8000f88 <HAL_DMA_IRQHandler+0x308>
 8000f40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f44:	e020      	b.n	8000f88 <HAL_DMA_IRQHandler+0x308>
 8000f46:	bf00      	nop
 8000f48:	40020080 	.word	0x40020080
 8000f4c:	40020008 	.word	0x40020008
 8000f50:	4002001c 	.word	0x4002001c
 8000f54:	40020030 	.word	0x40020030
 8000f58:	40020044 	.word	0x40020044
 8000f5c:	40020058 	.word	0x40020058
 8000f60:	4002006c 	.word	0x4002006c
 8000f64:	40020408 	.word	0x40020408
 8000f68:	4002041c 	.word	0x4002041c
 8000f6c:	40020430 	.word	0x40020430
 8000f70:	40020444 	.word	0x40020444
 8000f74:	40020400 	.word	0x40020400
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f80:	e002      	b.n	8000f88 <HAL_DMA_IRQHandler+0x308>
 8000f82:	2320      	movs	r3, #32
 8000f84:	e000      	b.n	8000f88 <HAL_DMA_IRQHandler+0x308>
 8000f86:	2302      	movs	r3, #2
 8000f88:	4a4e      	ldr	r2, [pc, #312]	; (80010c4 <HAL_DMA_IRQHandler+0x444>)
 8000f8a:	6053      	str	r3, [r2, #4]
 8000f8c:	e057      	b.n	800103e <HAL_DMA_IRQHandler+0x3be>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a4d      	ldr	r2, [pc, #308]	; (80010c8 <HAL_DMA_IRQHandler+0x448>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d04f      	beq.n	8001038 <HAL_DMA_IRQHandler+0x3b8>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a4b      	ldr	r2, [pc, #300]	; (80010cc <HAL_DMA_IRQHandler+0x44c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d048      	beq.n	8001034 <HAL_DMA_IRQHandler+0x3b4>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a4a      	ldr	r2, [pc, #296]	; (80010d0 <HAL_DMA_IRQHandler+0x450>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d040      	beq.n	800102e <HAL_DMA_IRQHandler+0x3ae>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a48      	ldr	r2, [pc, #288]	; (80010d4 <HAL_DMA_IRQHandler+0x454>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d038      	beq.n	8001028 <HAL_DMA_IRQHandler+0x3a8>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a47      	ldr	r2, [pc, #284]	; (80010d8 <HAL_DMA_IRQHandler+0x458>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d030      	beq.n	8001022 <HAL_DMA_IRQHandler+0x3a2>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a45      	ldr	r2, [pc, #276]	; (80010dc <HAL_DMA_IRQHandler+0x45c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d028      	beq.n	800101c <HAL_DMA_IRQHandler+0x39c>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a44      	ldr	r2, [pc, #272]	; (80010e0 <HAL_DMA_IRQHandler+0x460>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d020      	beq.n	8001016 <HAL_DMA_IRQHandler+0x396>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a42      	ldr	r2, [pc, #264]	; (80010e4 <HAL_DMA_IRQHandler+0x464>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d019      	beq.n	8001012 <HAL_DMA_IRQHandler+0x392>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a41      	ldr	r2, [pc, #260]	; (80010e8 <HAL_DMA_IRQHandler+0x468>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d012      	beq.n	800100e <HAL_DMA_IRQHandler+0x38e>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a3f      	ldr	r2, [pc, #252]	; (80010ec <HAL_DMA_IRQHandler+0x46c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d00a      	beq.n	8001008 <HAL_DMA_IRQHandler+0x388>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a3e      	ldr	r2, [pc, #248]	; (80010f0 <HAL_DMA_IRQHandler+0x470>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d102      	bne.n	8001002 <HAL_DMA_IRQHandler+0x382>
 8000ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001000:	e01b      	b.n	800103a <HAL_DMA_IRQHandler+0x3ba>
 8001002:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001006:	e018      	b.n	800103a <HAL_DMA_IRQHandler+0x3ba>
 8001008:	f44f 7300 	mov.w	r3, #512	; 0x200
 800100c:	e015      	b.n	800103a <HAL_DMA_IRQHandler+0x3ba>
 800100e:	2320      	movs	r3, #32
 8001010:	e013      	b.n	800103a <HAL_DMA_IRQHandler+0x3ba>
 8001012:	2302      	movs	r3, #2
 8001014:	e011      	b.n	800103a <HAL_DMA_IRQHandler+0x3ba>
 8001016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800101a:	e00e      	b.n	800103a <HAL_DMA_IRQHandler+0x3ba>
 800101c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001020:	e00b      	b.n	800103a <HAL_DMA_IRQHandler+0x3ba>
 8001022:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001026:	e008      	b.n	800103a <HAL_DMA_IRQHandler+0x3ba>
 8001028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800102c:	e005      	b.n	800103a <HAL_DMA_IRQHandler+0x3ba>
 800102e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001032:	e002      	b.n	800103a <HAL_DMA_IRQHandler+0x3ba>
 8001034:	2320      	movs	r3, #32
 8001036:	e000      	b.n	800103a <HAL_DMA_IRQHandler+0x3ba>
 8001038:	2302      	movs	r3, #2
 800103a:	4a2e      	ldr	r2, [pc, #184]	; (80010f4 <HAL_DMA_IRQHandler+0x474>)
 800103c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104a:	2b00      	cmp	r3, #0
 800104c:	d034      	beq.n	80010b8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001056:	e02f      	b.n	80010b8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	2208      	movs	r2, #8
 800105e:	409a      	lsls	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4013      	ands	r3, r2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d028      	beq.n	80010ba <HAL_DMA_IRQHandler+0x43a>
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	2b00      	cmp	r3, #0
 8001070:	d023      	beq.n	80010ba <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f022 020e 	bic.w	r2, r2, #14
 8001080:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800108a:	2101      	movs	r1, #1
 800108c:	fa01 f202 	lsl.w	r2, r1, r2
 8001090:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2201      	movs	r2, #1
 800109c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d004      	beq.n	80010ba <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	4798      	blx	r3
    }
  }
  return;
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
}
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40020400 	.word	0x40020400
 80010c8:	40020008 	.word	0x40020008
 80010cc:	4002001c 	.word	0x4002001c
 80010d0:	40020030 	.word	0x40020030
 80010d4:	40020044 	.word	0x40020044
 80010d8:	40020058 	.word	0x40020058
 80010dc:	4002006c 	.word	0x4002006c
 80010e0:	40020080 	.word	0x40020080
 80010e4:	40020408 	.word	0x40020408
 80010e8:	4002041c 	.word	0x4002041c
 80010ec:	40020430 	.word	0x40020430
 80010f0:	40020444 	.word	0x40020444
 80010f4:	40020000 	.word	0x40020000

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b08b      	sub	sp, #44	; 0x2c
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110a:	e133      	b.n	8001374 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800110c:	2201      	movs	r2, #1
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	69fa      	ldr	r2, [r7, #28]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	429a      	cmp	r2, r3
 8001126:	f040 8122 	bne.w	800136e <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b12      	cmp	r3, #18
 8001130:	d034      	beq.n	800119c <HAL_GPIO_Init+0xa4>
 8001132:	2b12      	cmp	r3, #18
 8001134:	d80d      	bhi.n	8001152 <HAL_GPIO_Init+0x5a>
 8001136:	2b02      	cmp	r3, #2
 8001138:	d02b      	beq.n	8001192 <HAL_GPIO_Init+0x9a>
 800113a:	2b02      	cmp	r3, #2
 800113c:	d804      	bhi.n	8001148 <HAL_GPIO_Init+0x50>
 800113e:	2b00      	cmp	r3, #0
 8001140:	d031      	beq.n	80011a6 <HAL_GPIO_Init+0xae>
 8001142:	2b01      	cmp	r3, #1
 8001144:	d01c      	beq.n	8001180 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001146:	e048      	b.n	80011da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001148:	2b03      	cmp	r3, #3
 800114a:	d043      	beq.n	80011d4 <HAL_GPIO_Init+0xdc>
 800114c:	2b11      	cmp	r3, #17
 800114e:	d01b      	beq.n	8001188 <HAL_GPIO_Init+0x90>
          break;
 8001150:	e043      	b.n	80011da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001152:	4a8f      	ldr	r2, [pc, #572]	; (8001390 <HAL_GPIO_Init+0x298>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d026      	beq.n	80011a6 <HAL_GPIO_Init+0xae>
 8001158:	4a8d      	ldr	r2, [pc, #564]	; (8001390 <HAL_GPIO_Init+0x298>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d806      	bhi.n	800116c <HAL_GPIO_Init+0x74>
 800115e:	4a8d      	ldr	r2, [pc, #564]	; (8001394 <HAL_GPIO_Init+0x29c>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d020      	beq.n	80011a6 <HAL_GPIO_Init+0xae>
 8001164:	4a8c      	ldr	r2, [pc, #560]	; (8001398 <HAL_GPIO_Init+0x2a0>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d01d      	beq.n	80011a6 <HAL_GPIO_Init+0xae>
          break;
 800116a:	e036      	b.n	80011da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800116c:	4a8b      	ldr	r2, [pc, #556]	; (800139c <HAL_GPIO_Init+0x2a4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d019      	beq.n	80011a6 <HAL_GPIO_Init+0xae>
 8001172:	4a8b      	ldr	r2, [pc, #556]	; (80013a0 <HAL_GPIO_Init+0x2a8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d016      	beq.n	80011a6 <HAL_GPIO_Init+0xae>
 8001178:	4a8a      	ldr	r2, [pc, #552]	; (80013a4 <HAL_GPIO_Init+0x2ac>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d013      	beq.n	80011a6 <HAL_GPIO_Init+0xae>
          break;
 800117e:	e02c      	b.n	80011da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	623b      	str	r3, [r7, #32]
          break;
 8001186:	e028      	b.n	80011da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	3304      	adds	r3, #4
 800118e:	623b      	str	r3, [r7, #32]
          break;
 8001190:	e023      	b.n	80011da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	3308      	adds	r3, #8
 8001198:	623b      	str	r3, [r7, #32]
          break;
 800119a:	e01e      	b.n	80011da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	330c      	adds	r3, #12
 80011a2:	623b      	str	r3, [r7, #32]
          break;
 80011a4:	e019      	b.n	80011da <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d102      	bne.n	80011b4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011ae:	2304      	movs	r3, #4
 80011b0:	623b      	str	r3, [r7, #32]
          break;
 80011b2:	e012      	b.n	80011da <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d105      	bne.n	80011c8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011bc:	2308      	movs	r3, #8
 80011be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69fa      	ldr	r2, [r7, #28]
 80011c4:	611a      	str	r2, [r3, #16]
          break;
 80011c6:	e008      	b.n	80011da <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011c8:	2308      	movs	r3, #8
 80011ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69fa      	ldr	r2, [r7, #28]
 80011d0:	615a      	str	r2, [r3, #20]
          break;
 80011d2:	e002      	b.n	80011da <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
          break;
 80011d8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	2bff      	cmp	r3, #255	; 0xff
 80011de:	d801      	bhi.n	80011e4 <HAL_GPIO_Init+0xec>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	e001      	b.n	80011e8 <HAL_GPIO_Init+0xf0>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3304      	adds	r3, #4
 80011e8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	2bff      	cmp	r3, #255	; 0xff
 80011ee:	d802      	bhi.n	80011f6 <HAL_GPIO_Init+0xfe>
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	e002      	b.n	80011fc <HAL_GPIO_Init+0x104>
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	3b08      	subs	r3, #8
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	210f      	movs	r1, #15
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	401a      	ands	r2, r3
 800120e:	6a39      	ldr	r1, [r7, #32]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	431a      	orrs	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80a2 	beq.w	800136e <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800122a:	4b5f      	ldr	r3, [pc, #380]	; (80013a8 <HAL_GPIO_Init+0x2b0>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	4a5e      	ldr	r2, [pc, #376]	; (80013a8 <HAL_GPIO_Init+0x2b0>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6193      	str	r3, [r2, #24]
 8001236:	4b5c      	ldr	r3, [pc, #368]	; (80013a8 <HAL_GPIO_Init+0x2b0>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001242:	4a5a      	ldr	r2, [pc, #360]	; (80013ac <HAL_GPIO_Init+0x2b4>)
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	3302      	adds	r3, #2
 800124a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	220f      	movs	r2, #15
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	4013      	ands	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a51      	ldr	r2, [pc, #324]	; (80013b0 <HAL_GPIO_Init+0x2b8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d01f      	beq.n	80012ae <HAL_GPIO_Init+0x1b6>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a50      	ldr	r2, [pc, #320]	; (80013b4 <HAL_GPIO_Init+0x2bc>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d019      	beq.n	80012aa <HAL_GPIO_Init+0x1b2>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4f      	ldr	r2, [pc, #316]	; (80013b8 <HAL_GPIO_Init+0x2c0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d013      	beq.n	80012a6 <HAL_GPIO_Init+0x1ae>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4e      	ldr	r2, [pc, #312]	; (80013bc <HAL_GPIO_Init+0x2c4>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d00d      	beq.n	80012a2 <HAL_GPIO_Init+0x1aa>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4d      	ldr	r2, [pc, #308]	; (80013c0 <HAL_GPIO_Init+0x2c8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d007      	beq.n	800129e <HAL_GPIO_Init+0x1a6>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4c      	ldr	r2, [pc, #304]	; (80013c4 <HAL_GPIO_Init+0x2cc>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d101      	bne.n	800129a <HAL_GPIO_Init+0x1a2>
 8001296:	2305      	movs	r3, #5
 8001298:	e00a      	b.n	80012b0 <HAL_GPIO_Init+0x1b8>
 800129a:	2306      	movs	r3, #6
 800129c:	e008      	b.n	80012b0 <HAL_GPIO_Init+0x1b8>
 800129e:	2304      	movs	r3, #4
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x1b8>
 80012a2:	2303      	movs	r3, #3
 80012a4:	e004      	b.n	80012b0 <HAL_GPIO_Init+0x1b8>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e002      	b.n	80012b0 <HAL_GPIO_Init+0x1b8>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_GPIO_Init+0x1b8>
 80012ae:	2300      	movs	r3, #0
 80012b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012b2:	f002 0203 	and.w	r2, r2, #3
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	4093      	lsls	r3, r2
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	4313      	orrs	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012c0:	493a      	ldr	r1, [pc, #232]	; (80013ac <HAL_GPIO_Init+0x2b4>)
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3302      	adds	r3, #2
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d006      	beq.n	80012e8 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012da:	4b3b      	ldr	r3, [pc, #236]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	493a      	ldr	r1, [pc, #232]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
 80012e6:	e006      	b.n	80012f6 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012e8:	4b37      	ldr	r3, [pc, #220]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	4935      	ldr	r1, [pc, #212]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 80012f2:	4013      	ands	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d006      	beq.n	8001310 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001302:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	4930      	ldr	r1, [pc, #192]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	604b      	str	r3, [r1, #4]
 800130e:	e006      	b.n	800131e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001310:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	43db      	mvns	r3, r3
 8001318:	492b      	ldr	r1, [pc, #172]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 800131a:	4013      	ands	r3, r2
 800131c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800132a:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	4926      	ldr	r1, [pc, #152]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	608b      	str	r3, [r1, #8]
 8001336:	e006      	b.n	8001346 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	43db      	mvns	r3, r3
 8001340:	4921      	ldr	r1, [pc, #132]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001342:	4013      	ands	r3, r2
 8001344:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d006      	beq.n	8001360 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	491c      	ldr	r1, [pc, #112]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	60cb      	str	r3, [r1, #12]
 800135e:	e006      	b.n	800136e <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	43db      	mvns	r3, r3
 8001368:	4917      	ldr	r1, [pc, #92]	; (80013c8 <HAL_GPIO_Init+0x2d0>)
 800136a:	4013      	ands	r3, r2
 800136c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	3301      	adds	r3, #1
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	fa22 f303 	lsr.w	r3, r2, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	f47f aec4 	bne.w	800110c <HAL_GPIO_Init+0x14>
  }
}
 8001384:	bf00      	nop
 8001386:	372c      	adds	r7, #44	; 0x2c
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	10210000 	.word	0x10210000
 8001394:	10110000 	.word	0x10110000
 8001398:	10120000 	.word	0x10120000
 800139c:	10310000 	.word	0x10310000
 80013a0:	10320000 	.word	0x10320000
 80013a4:	10220000 	.word	0x10220000
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40010000 	.word	0x40010000
 80013b0:	40010800 	.word	0x40010800
 80013b4:	40010c00 	.word	0x40010c00
 80013b8:	40011000 	.word	0x40011000
 80013bc:	40011400 	.word	0x40011400
 80013c0:	40011800 	.word	0x40011800
 80013c4:	40011c00 	.word	0x40011c00
 80013c8:	40010400 	.word	0x40010400

080013cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e26c      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 8087 	beq.w	80014fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013ec:	4b92      	ldr	r3, [pc, #584]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 030c 	and.w	r3, r3, #12
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	d00c      	beq.n	8001412 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013f8:	4b8f      	ldr	r3, [pc, #572]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 030c 	and.w	r3, r3, #12
 8001400:	2b08      	cmp	r3, #8
 8001402:	d112      	bne.n	800142a <HAL_RCC_OscConfig+0x5e>
 8001404:	4b8c      	ldr	r3, [pc, #560]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001410:	d10b      	bne.n	800142a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001412:	4b89      	ldr	r3, [pc, #548]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d06c      	beq.n	80014f8 <HAL_RCC_OscConfig+0x12c>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d168      	bne.n	80014f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e246      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001432:	d106      	bne.n	8001442 <HAL_RCC_OscConfig+0x76>
 8001434:	4b80      	ldr	r3, [pc, #512]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a7f      	ldr	r2, [pc, #508]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 800143a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	e02e      	b.n	80014a0 <HAL_RCC_OscConfig+0xd4>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10c      	bne.n	8001464 <HAL_RCC_OscConfig+0x98>
 800144a:	4b7b      	ldr	r3, [pc, #492]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a7a      	ldr	r2, [pc, #488]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	4b78      	ldr	r3, [pc, #480]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a77      	ldr	r2, [pc, #476]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 800145c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	e01d      	b.n	80014a0 <HAL_RCC_OscConfig+0xd4>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800146c:	d10c      	bne.n	8001488 <HAL_RCC_OscConfig+0xbc>
 800146e:	4b72      	ldr	r3, [pc, #456]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a71      	ldr	r2, [pc, #452]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	4b6f      	ldr	r3, [pc, #444]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a6e      	ldr	r2, [pc, #440]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e00b      	b.n	80014a0 <HAL_RCC_OscConfig+0xd4>
 8001488:	4b6b      	ldr	r3, [pc, #428]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a6a      	ldr	r2, [pc, #424]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 800148e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	4b68      	ldr	r3, [pc, #416]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a67      	ldr	r2, [pc, #412]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 800149a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800149e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d013      	beq.n	80014d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fa5c 	bl	8000964 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b0:	f7ff fa58 	bl	8000964 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b64      	cmp	r3, #100	; 0x64
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e1fa      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	4b5d      	ldr	r3, [pc, #372]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0xe4>
 80014ce:	e014      	b.n	80014fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fa48 	bl	8000964 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fa44 	bl	8000964 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	; 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e1e6      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ea:	4b53      	ldr	r3, [pc, #332]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x10c>
 80014f6:	e000      	b.n	80014fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d063      	beq.n	80015ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001506:	4b4c      	ldr	r3, [pc, #304]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00b      	beq.n	800152a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001512:	4b49      	ldr	r3, [pc, #292]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	2b08      	cmp	r3, #8
 800151c:	d11c      	bne.n	8001558 <HAL_RCC_OscConfig+0x18c>
 800151e:	4b46      	ldr	r3, [pc, #280]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d116      	bne.n	8001558 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152a:	4b43      	ldr	r3, [pc, #268]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d005      	beq.n	8001542 <HAL_RCC_OscConfig+0x176>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d001      	beq.n	8001542 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e1ba      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001542:	4b3d      	ldr	r3, [pc, #244]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4939      	ldr	r1, [pc, #228]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001552:	4313      	orrs	r3, r2
 8001554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001556:	e03a      	b.n	80015ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d020      	beq.n	80015a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001560:	4b36      	ldr	r3, [pc, #216]	; (800163c <HAL_RCC_OscConfig+0x270>)
 8001562:	2201      	movs	r2, #1
 8001564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001566:	f7ff f9fd 	bl	8000964 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800156e:	f7ff f9f9 	bl	8000964 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e19b      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001580:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158c:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	4927      	ldr	r1, [pc, #156]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 800159c:	4313      	orrs	r3, r2
 800159e:	600b      	str	r3, [r1, #0]
 80015a0:	e015      	b.n	80015ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a2:	4b26      	ldr	r3, [pc, #152]	; (800163c <HAL_RCC_OscConfig+0x270>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff f9dc 	bl	8000964 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b0:	f7ff f9d8 	bl	8000964 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e17a      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c2:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d03a      	beq.n	8001650 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d019      	beq.n	8001616 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <HAL_RCC_OscConfig+0x274>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e8:	f7ff f9bc 	bl	8000964 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f0:	f7ff f9b8 	bl	8000964 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e15a      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HAL_RCC_OscConfig+0x26c>)
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800160e:	2001      	movs	r0, #1
 8001610:	f000 fada 	bl	8001bc8 <RCC_Delay>
 8001614:	e01c      	b.n	8001650 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_RCC_OscConfig+0x274>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff f9a2 	bl	8000964 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001622:	e00f      	b.n	8001644 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001624:	f7ff f99e 	bl	8000964 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d908      	bls.n	8001644 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e140      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000
 800163c:	42420000 	.word	0x42420000
 8001640:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001644:	4b9e      	ldr	r3, [pc, #632]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1e9      	bne.n	8001624 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 80a6 	beq.w	80017aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001662:	4b97      	ldr	r3, [pc, #604]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10d      	bne.n	800168a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	4b94      	ldr	r3, [pc, #592]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	4a93      	ldr	r2, [pc, #588]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001678:	61d3      	str	r3, [r2, #28]
 800167a:	4b91      	ldr	r3, [pc, #580]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001686:	2301      	movs	r3, #1
 8001688:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168a:	4b8e      	ldr	r3, [pc, #568]	; (80018c4 <HAL_RCC_OscConfig+0x4f8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001692:	2b00      	cmp	r3, #0
 8001694:	d118      	bne.n	80016c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001696:	4b8b      	ldr	r3, [pc, #556]	; (80018c4 <HAL_RCC_OscConfig+0x4f8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a8a      	ldr	r2, [pc, #552]	; (80018c4 <HAL_RCC_OscConfig+0x4f8>)
 800169c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a2:	f7ff f95f 	bl	8000964 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016aa:	f7ff f95b 	bl	8000964 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b64      	cmp	r3, #100	; 0x64
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e0fd      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016bc:	4b81      	ldr	r3, [pc, #516]	; (80018c4 <HAL_RCC_OscConfig+0x4f8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d106      	bne.n	80016de <HAL_RCC_OscConfig+0x312>
 80016d0:	4b7b      	ldr	r3, [pc, #492]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	4a7a      	ldr	r2, [pc, #488]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6213      	str	r3, [r2, #32]
 80016dc:	e02d      	b.n	800173a <HAL_RCC_OscConfig+0x36e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0x334>
 80016e6:	4b76      	ldr	r3, [pc, #472]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4a75      	ldr	r2, [pc, #468]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 80016ec:	f023 0301 	bic.w	r3, r3, #1
 80016f0:	6213      	str	r3, [r2, #32]
 80016f2:	4b73      	ldr	r3, [pc, #460]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	4a72      	ldr	r2, [pc, #456]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 80016f8:	f023 0304 	bic.w	r3, r3, #4
 80016fc:	6213      	str	r3, [r2, #32]
 80016fe:	e01c      	b.n	800173a <HAL_RCC_OscConfig+0x36e>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	2b05      	cmp	r3, #5
 8001706:	d10c      	bne.n	8001722 <HAL_RCC_OscConfig+0x356>
 8001708:	4b6d      	ldr	r3, [pc, #436]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4a6c      	ldr	r2, [pc, #432]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 800170e:	f043 0304 	orr.w	r3, r3, #4
 8001712:	6213      	str	r3, [r2, #32]
 8001714:	4b6a      	ldr	r3, [pc, #424]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4a69      	ldr	r2, [pc, #420]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6213      	str	r3, [r2, #32]
 8001720:	e00b      	b.n	800173a <HAL_RCC_OscConfig+0x36e>
 8001722:	4b67      	ldr	r3, [pc, #412]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	4a66      	ldr	r2, [pc, #408]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001728:	f023 0301 	bic.w	r3, r3, #1
 800172c:	6213      	str	r3, [r2, #32]
 800172e:	4b64      	ldr	r3, [pc, #400]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	4a63      	ldr	r2, [pc, #396]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001734:	f023 0304 	bic.w	r3, r3, #4
 8001738:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d015      	beq.n	800176e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001742:	f7ff f90f 	bl	8000964 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001748:	e00a      	b.n	8001760 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff f90b 	bl	8000964 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	f241 3288 	movw	r2, #5000	; 0x1388
 8001758:	4293      	cmp	r3, r2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e0ab      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001760:	4b57      	ldr	r3, [pc, #348]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0ee      	beq.n	800174a <HAL_RCC_OscConfig+0x37e>
 800176c:	e014      	b.n	8001798 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176e:	f7ff f8f9 	bl	8000964 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001774:	e00a      	b.n	800178c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001776:	f7ff f8f5 	bl	8000964 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	f241 3288 	movw	r2, #5000	; 0x1388
 8001784:	4293      	cmp	r3, r2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e095      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178c:	4b4c      	ldr	r3, [pc, #304]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1ee      	bne.n	8001776 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001798:	7dfb      	ldrb	r3, [r7, #23]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d105      	bne.n	80017aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800179e:	4b48      	ldr	r3, [pc, #288]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	4a47      	ldr	r2, [pc, #284]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 80017a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 8081 	beq.w	80018b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b4:	4b42      	ldr	r3, [pc, #264]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d061      	beq.n	8001884 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d146      	bne.n	8001856 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c8:	4b3f      	ldr	r3, [pc, #252]	; (80018c8 <HAL_RCC_OscConfig+0x4fc>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ce:	f7ff f8c9 	bl	8000964 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d6:	f7ff f8c5 	bl	8000964 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e067      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e8:	4b35      	ldr	r3, [pc, #212]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017fc:	d108      	bne.n	8001810 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017fe:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	492d      	ldr	r1, [pc, #180]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001810:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a19      	ldr	r1, [r3, #32]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	430b      	orrs	r3, r1
 8001822:	4927      	ldr	r1, [pc, #156]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <HAL_RCC_OscConfig+0x4fc>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff f899 	bl	8000964 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001836:	f7ff f895 	bl	8000964 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e037      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x46a>
 8001854:	e02f      	b.n	80018b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <HAL_RCC_OscConfig+0x4fc>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff f882 	bl	8000964 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff f87e 	bl	8000964 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e020      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x498>
 8001882:	e018      	b.n	80018b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e013      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_RCC_OscConfig+0x4f4>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d106      	bne.n	80018b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d001      	beq.n	80018b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40007000 	.word	0x40007000
 80018c8:	42420060 	.word	0x42420060

080018cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0d0      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018e0:	4b6a      	ldr	r3, [pc, #424]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d910      	bls.n	8001910 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b67      	ldr	r3, [pc, #412]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 0207 	bic.w	r2, r3, #7
 80018f6:	4965      	ldr	r1, [pc, #404]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	4b63      	ldr	r3, [pc, #396]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0b8      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d020      	beq.n	800195e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001928:	4b59      	ldr	r3, [pc, #356]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4a58      	ldr	r2, [pc, #352]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001932:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001940:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4a52      	ldr	r2, [pc, #328]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800194a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800194c:	4b50      	ldr	r3, [pc, #320]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	494d      	ldr	r1, [pc, #308]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	4313      	orrs	r3, r2
 800195c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d040      	beq.n	80019ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d115      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e07f      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198a:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d109      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e073      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199a:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e06b      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019aa:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f023 0203 	bic.w	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4936      	ldr	r1, [pc, #216]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019bc:	f7fe ffd2 	bl	8000964 <HAL_GetTick>
 80019c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	e00a      	b.n	80019da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c4:	f7fe ffce 	bl	8000964 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e053      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 020c 	and.w	r2, r3, #12
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d1eb      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019ec:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d210      	bcs.n	8001a1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fa:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 0207 	bic.w	r2, r3, #7
 8001a02:	4922      	ldr	r1, [pc, #136]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e032      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d008      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4916      	ldr	r1, [pc, #88]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d009      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	490e      	ldr	r1, [pc, #56]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a5a:	f000 f821 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8001a5e:	4601      	mov	r1, r0
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6c:	5cd3      	ldrb	r3, [r2, r3]
 8001a6e:	fa21 f303 	lsr.w	r3, r1, r3
 8001a72:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <HAL_RCC_ClockConfig+0x1cc>)
 8001a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_RCC_ClockConfig+0x1d0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe ff30 	bl	80008e0 <HAL_InitTick>

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40022000 	.word	0x40022000
 8001a90:	40021000 	.word	0x40021000
 8001a94:	08002098 	.word	0x08002098
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa0:	b490      	push	{r4, r7}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001aa8:	1d3c      	adds	r4, r7, #4
 8001aaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ab0:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aca:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d002      	beq.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x40>
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d003      	beq.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x46>
 8001ade:	e02d      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ae2:	623b      	str	r3, [r7, #32]
      break;
 8001ae4:	e02d      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	0c9b      	lsrs	r3, r3, #18
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001af2:	4413      	add	r3, r2
 8001af4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001af8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d013      	beq.n	8001b2c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	0c5b      	lsrs	r3, r3, #17
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b12:	4413      	add	r3, r2
 8001b14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b18:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b1e:	fb02 f203 	mul.w	r2, r2, r3
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2a:	e004      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	4a0c      	ldr	r2, [pc, #48]	; (8001b60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b30:	fb02 f303 	mul.w	r3, r2, r3
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	623b      	str	r3, [r7, #32]
      break;
 8001b3a:	e002      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b3e:	623b      	str	r3, [r7, #32]
      break;
 8001b40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b42:	6a3b      	ldr	r3, [r7, #32]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3728      	adds	r7, #40	; 0x28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc90      	pop	{r4, r7}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	08002084 	.word	0x08002084
 8001b54:	08002094 	.word	0x08002094
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	007a1200 	.word	0x007a1200
 8001b60:	003d0900 	.word	0x003d0900

08001b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b68:	4b02      	ldr	r3, [pc, #8]	; (8001b74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr
 8001b74:	20000000 	.word	0x20000000

08001b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b7c:	f7ff fff2 	bl	8001b64 <HAL_RCC_GetHCLKFreq>
 8001b80:	4601      	mov	r1, r0
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	4a03      	ldr	r2, [pc, #12]	; (8001b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b8e:	5cd3      	ldrb	r3, [r2, r3]
 8001b90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	080020a8 	.word	0x080020a8

08001ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ba4:	f7ff ffde 	bl	8001b64 <HAL_RCC_GetHCLKFreq>
 8001ba8:	4601      	mov	r1, r0
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	0adb      	lsrs	r3, r3, #11
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	4a03      	ldr	r2, [pc, #12]	; (8001bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bb6:	5cd3      	ldrb	r3, [r2, r3]
 8001bb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	080020a8 	.word	0x080020a8

08001bc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <RCC_Delay+0x34>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <RCC_Delay+0x38>)
 8001bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bda:	0a5b      	lsrs	r3, r3, #9
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001be4:	bf00      	nop
  }
  while (Delay --);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1e5a      	subs	r2, r3, #1
 8001bea:	60fa      	str	r2, [r7, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f9      	bne.n	8001be4 <RCC_Delay+0x1c>
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	10624dd3 	.word	0x10624dd3

08001c04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e03f      	b.n	8001c96 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d106      	bne.n	8001c30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7fe fd44 	bl	80006b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2224      	movs	r2, #36	; 0x24
 8001c34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f829 	bl	8001ca0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	695a      	ldr	r2, [r3, #20]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2220      	movs	r2, #32
 8001c88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001cda:	f023 030c 	bic.w	r3, r3, #12
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	68f9      	ldr	r1, [r7, #12]
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699a      	ldr	r2, [r3, #24]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a52      	ldr	r2, [pc, #328]	; (8001e4c <UART_SetConfig+0x1ac>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d14e      	bne.n	8001da6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d08:	f7ff ff4a 	bl	8001ba0 <HAL_RCC_GetPCLK2Freq>
 8001d0c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	009a      	lsls	r2, r3, #2
 8001d18:	441a      	add	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d24:	4a4a      	ldr	r2, [pc, #296]	; (8001e50 <UART_SetConfig+0x1b0>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	0119      	lsls	r1, r3, #4
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	009a      	lsls	r2, r3, #2
 8001d38:	441a      	add	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d44:	4b42      	ldr	r3, [pc, #264]	; (8001e50 <UART_SetConfig+0x1b0>)
 8001d46:	fba3 0302 	umull	r0, r3, r3, r2
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2064      	movs	r0, #100	; 0x64
 8001d4e:	fb00 f303 	mul.w	r3, r0, r3
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	3332      	adds	r3, #50	; 0x32
 8001d58:	4a3d      	ldr	r2, [pc, #244]	; (8001e50 <UART_SetConfig+0x1b0>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d64:	4419      	add	r1, r3
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	009a      	lsls	r2, r3, #2
 8001d70:	441a      	add	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d7c:	4b34      	ldr	r3, [pc, #208]	; (8001e50 <UART_SetConfig+0x1b0>)
 8001d7e:	fba3 0302 	umull	r0, r3, r3, r2
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	2064      	movs	r0, #100	; 0x64
 8001d86:	fb00 f303 	mul.w	r3, r0, r3
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	3332      	adds	r3, #50	; 0x32
 8001d90:	4a2f      	ldr	r2, [pc, #188]	; (8001e50 <UART_SetConfig+0x1b0>)
 8001d92:	fba2 2303 	umull	r2, r3, r2, r3
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	f003 020f 	and.w	r2, r3, #15
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	440a      	add	r2, r1
 8001da2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001da4:	e04d      	b.n	8001e42 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001da6:	f7ff fee7 	bl	8001b78 <HAL_RCC_GetPCLK1Freq>
 8001daa:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	009a      	lsls	r2, r3, #2
 8001db6:	441a      	add	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	4a23      	ldr	r2, [pc, #140]	; (8001e50 <UART_SetConfig+0x1b0>)
 8001dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc8:	095b      	lsrs	r3, r3, #5
 8001dca:	0119      	lsls	r1, r3, #4
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009a      	lsls	r2, r3, #2
 8001dd6:	441a      	add	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	fbb2 f2f3 	udiv	r2, r2, r3
 8001de2:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <UART_SetConfig+0x1b0>)
 8001de4:	fba3 0302 	umull	r0, r3, r3, r2
 8001de8:	095b      	lsrs	r3, r3, #5
 8001dea:	2064      	movs	r0, #100	; 0x64
 8001dec:	fb00 f303 	mul.w	r3, r0, r3
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	3332      	adds	r3, #50	; 0x32
 8001df6:	4a16      	ldr	r2, [pc, #88]	; (8001e50 <UART_SetConfig+0x1b0>)
 8001df8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfc:	095b      	lsrs	r3, r3, #5
 8001dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e02:	4419      	add	r1, r3
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009a      	lsls	r2, r3, #2
 8001e0e:	441a      	add	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <UART_SetConfig+0x1b0>)
 8001e1c:	fba3 0302 	umull	r0, r3, r3, r2
 8001e20:	095b      	lsrs	r3, r3, #5
 8001e22:	2064      	movs	r0, #100	; 0x64
 8001e24:	fb00 f303 	mul.w	r3, r0, r3
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	3332      	adds	r3, #50	; 0x32
 8001e2e:	4a08      	ldr	r2, [pc, #32]	; (8001e50 <UART_SetConfig+0x1b0>)
 8001e30:	fba2 2303 	umull	r2, r3, r2, r3
 8001e34:	095b      	lsrs	r3, r3, #5
 8001e36:	f003 020f 	and.w	r2, r3, #15
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	440a      	add	r2, r1
 8001e40:	609a      	str	r2, [r3, #8]
}
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40013800 	.word	0x40013800
 8001e50:	51eb851f 	.word	0x51eb851f

08001e54 <_Znwj>:
 8001e54:	b510      	push	{r4, lr}
 8001e56:	2800      	cmp	r0, #0
 8001e58:	bf14      	ite	ne
 8001e5a:	4604      	movne	r4, r0
 8001e5c:	2401      	moveq	r4, #1
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f000 f844 	bl	8001eec <malloc>
 8001e64:	b930      	cbnz	r0, 8001e74 <_Znwj+0x20>
 8001e66:	f000 f807 	bl	8001e78 <_ZSt15get_new_handlerv>
 8001e6a:	b908      	cbnz	r0, 8001e70 <_Znwj+0x1c>
 8001e6c:	f000 f80c 	bl	8001e88 <abort>
 8001e70:	4780      	blx	r0
 8001e72:	e7f4      	b.n	8001e5e <_Znwj+0xa>
 8001e74:	bd10      	pop	{r4, pc}
	...

08001e78 <_ZSt15get_new_handlerv>:
 8001e78:	4b02      	ldr	r3, [pc, #8]	; (8001e84 <_ZSt15get_new_handlerv+0xc>)
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	f3bf 8f5b 	dmb	ish
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000098 	.word	0x20000098

08001e88 <abort>:
 8001e88:	b508      	push	{r3, lr}
 8001e8a:	2006      	movs	r0, #6
 8001e8c:	f000 f8d0 	bl	8002030 <raise>
 8001e90:	2001      	movs	r0, #1
 8001e92:	f7fe fb52 	bl	800053a <_exit>
	...

08001e98 <__errno>:
 8001e98:	4b01      	ldr	r3, [pc, #4]	; (8001ea0 <__errno+0x8>)
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	2000000c 	.word	0x2000000c

08001ea4 <__libc_init_array>:
 8001ea4:	b570      	push	{r4, r5, r6, lr}
 8001ea6:	2500      	movs	r5, #0
 8001ea8:	4e0c      	ldr	r6, [pc, #48]	; (8001edc <__libc_init_array+0x38>)
 8001eaa:	4c0d      	ldr	r4, [pc, #52]	; (8001ee0 <__libc_init_array+0x3c>)
 8001eac:	1ba4      	subs	r4, r4, r6
 8001eae:	10a4      	asrs	r4, r4, #2
 8001eb0:	42a5      	cmp	r5, r4
 8001eb2:	d109      	bne.n	8001ec8 <__libc_init_array+0x24>
 8001eb4:	f000 f8da 	bl	800206c <_init>
 8001eb8:	2500      	movs	r5, #0
 8001eba:	4e0a      	ldr	r6, [pc, #40]	; (8001ee4 <__libc_init_array+0x40>)
 8001ebc:	4c0a      	ldr	r4, [pc, #40]	; (8001ee8 <__libc_init_array+0x44>)
 8001ebe:	1ba4      	subs	r4, r4, r6
 8001ec0:	10a4      	asrs	r4, r4, #2
 8001ec2:	42a5      	cmp	r5, r4
 8001ec4:	d105      	bne.n	8001ed2 <__libc_init_array+0x2e>
 8001ec6:	bd70      	pop	{r4, r5, r6, pc}
 8001ec8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ecc:	4798      	blx	r3
 8001ece:	3501      	adds	r5, #1
 8001ed0:	e7ee      	b.n	8001eb0 <__libc_init_array+0xc>
 8001ed2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ed6:	4798      	blx	r3
 8001ed8:	3501      	adds	r5, #1
 8001eda:	e7f2      	b.n	8001ec2 <__libc_init_array+0x1e>
 8001edc:	080020b0 	.word	0x080020b0
 8001ee0:	080020b0 	.word	0x080020b0
 8001ee4:	080020b0 	.word	0x080020b0
 8001ee8:	080020b4 	.word	0x080020b4

08001eec <malloc>:
 8001eec:	4b02      	ldr	r3, [pc, #8]	; (8001ef8 <malloc+0xc>)
 8001eee:	4601      	mov	r1, r0
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	f000 b80b 	b.w	8001f0c <_malloc_r>
 8001ef6:	bf00      	nop
 8001ef8:	2000000c 	.word	0x2000000c

08001efc <memset>:
 8001efc:	4603      	mov	r3, r0
 8001efe:	4402      	add	r2, r0
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d100      	bne.n	8001f06 <memset+0xa>
 8001f04:	4770      	bx	lr
 8001f06:	f803 1b01 	strb.w	r1, [r3], #1
 8001f0a:	e7f9      	b.n	8001f00 <memset+0x4>

08001f0c <_malloc_r>:
 8001f0c:	b570      	push	{r4, r5, r6, lr}
 8001f0e:	1ccd      	adds	r5, r1, #3
 8001f10:	f025 0503 	bic.w	r5, r5, #3
 8001f14:	3508      	adds	r5, #8
 8001f16:	2d0c      	cmp	r5, #12
 8001f18:	bf38      	it	cc
 8001f1a:	250c      	movcc	r5, #12
 8001f1c:	2d00      	cmp	r5, #0
 8001f1e:	4606      	mov	r6, r0
 8001f20:	db01      	blt.n	8001f26 <_malloc_r+0x1a>
 8001f22:	42a9      	cmp	r1, r5
 8001f24:	d903      	bls.n	8001f2e <_malloc_r+0x22>
 8001f26:	230c      	movs	r3, #12
 8001f28:	6033      	str	r3, [r6, #0]
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	bd70      	pop	{r4, r5, r6, pc}
 8001f2e:	f000 f89b 	bl	8002068 <__malloc_lock>
 8001f32:	4a21      	ldr	r2, [pc, #132]	; (8001fb8 <_malloc_r+0xac>)
 8001f34:	6814      	ldr	r4, [r2, #0]
 8001f36:	4621      	mov	r1, r4
 8001f38:	b991      	cbnz	r1, 8001f60 <_malloc_r+0x54>
 8001f3a:	4c20      	ldr	r4, [pc, #128]	; (8001fbc <_malloc_r+0xb0>)
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	b91b      	cbnz	r3, 8001f48 <_malloc_r+0x3c>
 8001f40:	4630      	mov	r0, r6
 8001f42:	f000 f83d 	bl	8001fc0 <_sbrk_r>
 8001f46:	6020      	str	r0, [r4, #0]
 8001f48:	4629      	mov	r1, r5
 8001f4a:	4630      	mov	r0, r6
 8001f4c:	f000 f838 	bl	8001fc0 <_sbrk_r>
 8001f50:	1c43      	adds	r3, r0, #1
 8001f52:	d124      	bne.n	8001f9e <_malloc_r+0x92>
 8001f54:	230c      	movs	r3, #12
 8001f56:	4630      	mov	r0, r6
 8001f58:	6033      	str	r3, [r6, #0]
 8001f5a:	f000 f886 	bl	800206a <__malloc_unlock>
 8001f5e:	e7e4      	b.n	8001f2a <_malloc_r+0x1e>
 8001f60:	680b      	ldr	r3, [r1, #0]
 8001f62:	1b5b      	subs	r3, r3, r5
 8001f64:	d418      	bmi.n	8001f98 <_malloc_r+0x8c>
 8001f66:	2b0b      	cmp	r3, #11
 8001f68:	d90f      	bls.n	8001f8a <_malloc_r+0x7e>
 8001f6a:	600b      	str	r3, [r1, #0]
 8001f6c:	18cc      	adds	r4, r1, r3
 8001f6e:	50cd      	str	r5, [r1, r3]
 8001f70:	4630      	mov	r0, r6
 8001f72:	f000 f87a 	bl	800206a <__malloc_unlock>
 8001f76:	f104 000b 	add.w	r0, r4, #11
 8001f7a:	1d23      	adds	r3, r4, #4
 8001f7c:	f020 0007 	bic.w	r0, r0, #7
 8001f80:	1ac3      	subs	r3, r0, r3
 8001f82:	d0d3      	beq.n	8001f2c <_malloc_r+0x20>
 8001f84:	425a      	negs	r2, r3
 8001f86:	50e2      	str	r2, [r4, r3]
 8001f88:	e7d0      	b.n	8001f2c <_malloc_r+0x20>
 8001f8a:	684b      	ldr	r3, [r1, #4]
 8001f8c:	428c      	cmp	r4, r1
 8001f8e:	bf16      	itet	ne
 8001f90:	6063      	strne	r3, [r4, #4]
 8001f92:	6013      	streq	r3, [r2, #0]
 8001f94:	460c      	movne	r4, r1
 8001f96:	e7eb      	b.n	8001f70 <_malloc_r+0x64>
 8001f98:	460c      	mov	r4, r1
 8001f9a:	6849      	ldr	r1, [r1, #4]
 8001f9c:	e7cc      	b.n	8001f38 <_malloc_r+0x2c>
 8001f9e:	1cc4      	adds	r4, r0, #3
 8001fa0:	f024 0403 	bic.w	r4, r4, #3
 8001fa4:	42a0      	cmp	r0, r4
 8001fa6:	d005      	beq.n	8001fb4 <_malloc_r+0xa8>
 8001fa8:	1a21      	subs	r1, r4, r0
 8001faa:	4630      	mov	r0, r6
 8001fac:	f000 f808 	bl	8001fc0 <_sbrk_r>
 8001fb0:	3001      	adds	r0, #1
 8001fb2:	d0cf      	beq.n	8001f54 <_malloc_r+0x48>
 8001fb4:	6025      	str	r5, [r4, #0]
 8001fb6:	e7db      	b.n	8001f70 <_malloc_r+0x64>
 8001fb8:	2000009c 	.word	0x2000009c
 8001fbc:	200000a0 	.word	0x200000a0

08001fc0 <_sbrk_r>:
 8001fc0:	b538      	push	{r3, r4, r5, lr}
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	4c05      	ldr	r4, [pc, #20]	; (8001fdc <_sbrk_r+0x1c>)
 8001fc6:	4605      	mov	r5, r0
 8001fc8:	4608      	mov	r0, r1
 8001fca:	6023      	str	r3, [r4, #0]
 8001fcc:	f7fe fac0 	bl	8000550 <_sbrk>
 8001fd0:	1c43      	adds	r3, r0, #1
 8001fd2:	d102      	bne.n	8001fda <_sbrk_r+0x1a>
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	b103      	cbz	r3, 8001fda <_sbrk_r+0x1a>
 8001fd8:	602b      	str	r3, [r5, #0]
 8001fda:	bd38      	pop	{r3, r4, r5, pc}
 8001fdc:	200001b0 	.word	0x200001b0

08001fe0 <_raise_r>:
 8001fe0:	291f      	cmp	r1, #31
 8001fe2:	b538      	push	{r3, r4, r5, lr}
 8001fe4:	4604      	mov	r4, r0
 8001fe6:	460d      	mov	r5, r1
 8001fe8:	d904      	bls.n	8001ff4 <_raise_r+0x14>
 8001fea:	2316      	movs	r3, #22
 8001fec:	6003      	str	r3, [r0, #0]
 8001fee:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff2:	bd38      	pop	{r3, r4, r5, pc}
 8001ff4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001ff6:	b112      	cbz	r2, 8001ffe <_raise_r+0x1e>
 8001ff8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001ffc:	b94b      	cbnz	r3, 8002012 <_raise_r+0x32>
 8001ffe:	4620      	mov	r0, r4
 8002000:	f000 f830 	bl	8002064 <_getpid_r>
 8002004:	462a      	mov	r2, r5
 8002006:	4601      	mov	r1, r0
 8002008:	4620      	mov	r0, r4
 800200a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800200e:	f000 b817 	b.w	8002040 <_kill_r>
 8002012:	2b01      	cmp	r3, #1
 8002014:	d00a      	beq.n	800202c <_raise_r+0x4c>
 8002016:	1c59      	adds	r1, r3, #1
 8002018:	d103      	bne.n	8002022 <_raise_r+0x42>
 800201a:	2316      	movs	r3, #22
 800201c:	6003      	str	r3, [r0, #0]
 800201e:	2001      	movs	r0, #1
 8002020:	e7e7      	b.n	8001ff2 <_raise_r+0x12>
 8002022:	2400      	movs	r4, #0
 8002024:	4628      	mov	r0, r5
 8002026:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800202a:	4798      	blx	r3
 800202c:	2000      	movs	r0, #0
 800202e:	e7e0      	b.n	8001ff2 <_raise_r+0x12>

08002030 <raise>:
 8002030:	4b02      	ldr	r3, [pc, #8]	; (800203c <raise+0xc>)
 8002032:	4601      	mov	r1, r0
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	f7ff bfd3 	b.w	8001fe0 <_raise_r>
 800203a:	bf00      	nop
 800203c:	2000000c 	.word	0x2000000c

08002040 <_kill_r>:
 8002040:	b538      	push	{r3, r4, r5, lr}
 8002042:	2300      	movs	r3, #0
 8002044:	4c06      	ldr	r4, [pc, #24]	; (8002060 <_kill_r+0x20>)
 8002046:	4605      	mov	r5, r0
 8002048:	4608      	mov	r0, r1
 800204a:	4611      	mov	r1, r2
 800204c:	6023      	str	r3, [r4, #0]
 800204e:	f7fe fa64 	bl	800051a <_kill>
 8002052:	1c43      	adds	r3, r0, #1
 8002054:	d102      	bne.n	800205c <_kill_r+0x1c>
 8002056:	6823      	ldr	r3, [r4, #0]
 8002058:	b103      	cbz	r3, 800205c <_kill_r+0x1c>
 800205a:	602b      	str	r3, [r5, #0]
 800205c:	bd38      	pop	{r3, r4, r5, pc}
 800205e:	bf00      	nop
 8002060:	200001b0 	.word	0x200001b0

08002064 <_getpid_r>:
 8002064:	f7fe ba52 	b.w	800050c <_getpid>

08002068 <__malloc_lock>:
 8002068:	4770      	bx	lr

0800206a <__malloc_unlock>:
 800206a:	4770      	bx	lr

0800206c <_init>:
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206e:	bf00      	nop
 8002070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002072:	bc08      	pop	{r3}
 8002074:	469e      	mov	lr, r3
 8002076:	4770      	bx	lr

08002078 <_fini>:
 8002078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800207a:	bf00      	nop
 800207c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800207e:	bc08      	pop	{r3}
 8002080:	469e      	mov	lr, r3
 8002082:	4770      	bx	lr
